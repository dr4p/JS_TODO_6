{"ast":null,"code":"import { useState as $6imuh$useState, useRef as $6imuh$useRef, useCallback as $6imuh$useCallback } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nfunction $458b0a5536c1a7cf$export$40bfa8c7b0832715(value, defaultValue, onChange) {\n  let [stateValue, setStateValue] = (0, $6imuh$useState)(value || defaultValue);\n  let ref = (0, $6imuh$useRef)(value !== undefined);\n  let wasControlled = ref.current;\n  let isControlled = value !== undefined;\n  // Internal state reference for useCallback\n  let stateRef = (0, $6imuh$useRef)(stateValue);\n  if (wasControlled !== isControlled) console.warn(`WARN: A component changed from ${wasControlled ? \"controlled\" : \"uncontrolled\"} to ${isControlled ? \"controlled\" : \"uncontrolled\"}.`);\n  ref.current = isControlled;\n  let setValue = (0, $6imuh$useCallback)(function (value) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    let onChangeCaller = function (value) {\n      if (onChange) {\n        for (var _len2 = arguments.length, onChangeArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          onChangeArgs[_key2 - 1] = arguments[_key2];\n        }\n        if (!Object.is(stateRef.current, value)) onChange(value, ...onChangeArgs);\n      }\n      if (!isControlled) stateRef.current = value;\n    };\n    if (typeof value === \"function\") {\n      console.warn(\"We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320\");\n      // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n      // when someone using useControlledState calls setControlledState(myFunc)\n      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n      let updateFunction = function (oldValue) {\n        for (var _len3 = arguments.length, functionArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          functionArgs[_key3 - 1] = arguments[_key3];\n        }\n        let interceptedValue = value(isControlled ? stateRef.current : oldValue, ...functionArgs);\n        onChangeCaller(interceptedValue, ...args);\n        if (!isControlled) return interceptedValue;\n        return oldValue;\n      };\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) setStateValue(value);\n      onChangeCaller(value, ...args);\n    }\n  }, [isControlled, onChange]);\n  // If a controlled component's value prop changes, we need to update stateRef\n  if (isControlled) stateRef.current = value;else value = stateValue;\n  return [value, setValue];\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /**\n    * Takes a value and forces it to the closest min/max if it's outside. Also forces it to the closest valid step.\n    */\nfunction $9446cca9a3875146$export$7d15b64cf5a3a4c4(value) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -Infinity;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  let newValue = Math.min(Math.max(value, min), max);\n  return newValue;\n}\nfunction $9446cca9a3875146$export$cb6e0bb50bc19463(value, min, max, step) {\n  let remainder = (value - (isNaN(min) ? 0 : min)) % step;\n  let snappedValue = Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder;\n  if (!isNaN(min)) {\n    if (snappedValue < min) snappedValue = min;else if (!isNaN(max) && snappedValue > max) snappedValue = min + Math.floor((max - min) / step) * step;\n  } else if (!isNaN(max) && snappedValue > max) snappedValue = Math.floor(max / step) * step;\n  // correct floating point behavior by rounding to step precision\n  let string = step.toString();\n  let index = string.indexOf(\".\");\n  let precision = index >= 0 ? string.length - index : 0;\n  if (precision > 0) {\n    let pow = Math.pow(10, precision);\n    snappedValue = Math.round(snappedValue * pow) / pow;\n  }\n  return snappedValue;\n}\nfunction $9446cca9a3875146$export$b6268554fba451f(value, digits) {\n  let base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n  const pow = Math.pow(base, digits);\n  return Math.round(value * pow) / pow;\n}\nexport { $458b0a5536c1a7cf$export$40bfa8c7b0832715 as useControlledState, $9446cca9a3875146$export$7d15b64cf5a3a4c4 as clamp, $9446cca9a3875146$export$cb6e0bb50bc19463 as snapValueToStep, $9446cca9a3875146$export$b6268554fba451f as toFixedNumber };","map":{"version":3,"names":["$458b0a5536c1a7cf$export$40bfa8c7b0832715","value","defaultValue","onChange","stateValue","setStateValue","$6imuh$useState","ref","$6imuh$useRef","undefined","wasControlled","current","isControlled","stateRef","console","warn","setValue","$6imuh$useCallback","_len","arguments","length","args","Array","_key","onChangeCaller","_len2","onChangeArgs","_key2","Object","is","updateFunction","oldValue","_len3","functionArgs","_key3","interceptedValue","$9446cca9a3875146$export$7d15b64cf5a3a4c4","min","Infinity","max","newValue","Math","$9446cca9a3875146$export$cb6e0bb50bc19463","step","remainder","isNaN","snappedValue","abs","sign","floor","string","toString","index","indexOf","precision","pow","round","$9446cca9a3875146$export$b6268554fba451f","digits","base"],"sources":["C:\\Users\\Dmitry\\Desktop\\JS\\untitled2\\zaebalo\\node_modules\\@react-stately\\utils\\dist\\packages\\@react-stately\\utils\\src\\index.ts","C:\\Users\\Dmitry\\Desktop\\JS\\untitled2\\zaebalo\\node_modules\\@react-stately\\utils\\dist\\packages\\@react-stately\\utils\\src\\useControlledState.ts","C:\\Users\\Dmitry\\Desktop\\JS\\untitled2\\zaebalo\\node_modules\\@react-stately\\utils\\dist\\packages\\@react-stately\\utils\\src\\number.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport {useControlledState} from './useControlledState';\nexport {clamp, snapValueToStep, toFixedNumber} from './number';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useRef, useState} from 'react';\n\nexport function useControlledState<T>(\n  value: T,\n  defaultValue: T,\n  onChange: (value: T, ...args: any[]) => void\n): [T, (value: T, ...args: any[]) => void]  {\n  let [stateValue, setStateValue] = useState(value || defaultValue);\n  let ref = useRef(value !== undefined);\n  let wasControlled = ref.current;\n  let isControlled = value !== undefined;\n  // Internal state reference for useCallback\n  let stateRef = useRef(stateValue);\n  if (wasControlled !== isControlled) {\n    console.warn(`WARN: A component changed from ${wasControlled ? 'controlled' : 'uncontrolled'} to ${isControlled ? 'controlled' : 'uncontrolled'}.`);\n  }\n\n  ref.current = isControlled;\n\n  let setValue = useCallback((value, ...args) => {\n    let onChangeCaller = (value, ...onChangeArgs) => {\n      if (onChange) {\n        if (!Object.is(stateRef.current, value)) {\n          onChange(value, ...onChangeArgs);\n        }\n      }\n      if (!isControlled) {\n        stateRef.current = value;\n      }\n    };\n\n    if (typeof value === 'function') {\n      console.warn('We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320');\n      // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n      // when someone using useControlledState calls setControlledState(myFunc)\n      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n      let updateFunction = (oldValue, ...functionArgs) => {\n        let interceptedValue = value(isControlled ? stateRef.current : oldValue, ...functionArgs);\n        onChangeCaller(interceptedValue, ...args);\n        if (!isControlled) {\n          return interceptedValue;\n        }\n        return oldValue;\n      };\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) {\n        setStateValue(value);\n      }\n      onChangeCaller(value, ...args);\n    }\n  }, [isControlled, onChange]);\n\n  // If a controlled component's value prop changes, we need to update stateRef\n  if (isControlled) {\n    stateRef.current = value;\n  } else {\n    value = stateValue;\n  }\n\n  return [value, setValue];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/**\n * Takes a value and forces it to the closest min/max if it's outside. Also forces it to the closest valid step.\n */\nexport function clamp(value: number, min: number = -Infinity, max: number = Infinity): number {\n  let newValue = Math.min(Math.max(value, min), max);\n  return newValue;\n}\n\nexport function snapValueToStep(value: number, min: number, max: number, step: number): number {\n  let remainder = ((value - (isNaN(min) ? 0 : min)) % step);\n  let snappedValue = Math.abs(remainder) * 2 >= step\n    ? value + Math.sign(remainder) * (step - Math.abs(remainder))\n    : value - remainder;\n\n  if (!isNaN(min)) {\n    if (snappedValue < min) {\n      snappedValue = min;\n    } else if (!isNaN(max) && snappedValue > max) {\n      snappedValue = min + Math.floor((max - min) / step) * step;\n    }\n  } else if (!isNaN(max) && snappedValue > max) {\n    snappedValue = Math.floor(max / step) * step;\n  }\n\n  // correct floating point behavior by rounding to step precision\n  let string = step.toString();\n  let index = string.indexOf('.');\n  let precision = index >= 0 ? string.length - index : 0;\n\n  if (precision > 0) {\n    let pow = Math.pow(10, precision);\n    snappedValue = Math.round(snappedValue * pow) / pow;\n  }\n\n  return snappedValue;\n}\n\n/* Takes a value and rounds off to the number of digits. */\nexport function toFixedNumber(value: number, digits: number, base: number = 10): number {\n  const pow = Math.pow(base, digits);\n\n  return Math.round(value * pow) / pow;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}