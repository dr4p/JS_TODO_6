{"ast":null,"code":"import { useReducer as $d70Aq$useReducer, useEffect as $d70Aq$useEffect, useState as $d70Aq$useState, useMemo as $d70Aq$useMemo } from \"react\";\nfunction $0d86e9c8f07f9a7b$export$762f73dccccd255d(options) {\n  let {\n    initialItems = [],\n    initialSelectedKeys: initialSelectedKeys,\n    getKey = item => item.id || item.key,\n    filter: filter,\n    initialFilterText = ''\n  } = options;\n  // Store both items and filteredItems in state so we can go back to the unfiltered list\n  let [state, setState] = $d70Aq$useState({\n    items: initialItems,\n    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys || []),\n    filterText: initialFilterText\n  });\n  let filteredItems = $d70Aq$useMemo(() => filter ? state.items.filter(item => filter(item, state.filterText)) : state.items, [state.items, state.filterText, filter]);\n  return {\n    ...state,\n    items: filteredItems,\n    ...$0d86e9c8f07f9a7b$export$79c0c687a5963b0a({\n      getKey: getKey\n    }, setState),\n    getItem(key) {\n      return state.items.find(item => getKey(item) === key);\n    }\n  };\n}\nfunction $0d86e9c8f07f9a7b$export$79c0c687a5963b0a(opts, dispatch) {\n  let {\n    cursor: cursor,\n    getKey: getKey\n  } = opts;\n  return {\n    setSelectedKeys(selectedKeys) {\n      dispatch(state => ({\n        ...state,\n        selectedKeys: selectedKeys\n      }));\n    },\n    setFilterText(filterText) {\n      dispatch(state => ({\n        ...state,\n        filterText: filterText\n      }));\n    },\n    insert(index) {\n      for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        values[_key - 1] = arguments[_key];\n      }\n      dispatch(state => $0d86e9c8f07f9a7b$var$insert(state, index, ...values));\n    },\n    insertBefore(key) {\n      for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        values[_key2 - 1] = arguments[_key2];\n      }\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) return;\n        return $0d86e9c8f07f9a7b$var$insert(state, index, ...values);\n      });\n    },\n    insertAfter(key) {\n      for (var _len3 = arguments.length, values = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        values[_key3 - 1] = arguments[_key3];\n      }\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) return;\n        return $0d86e9c8f07f9a7b$var$insert(state, index + 1, ...values);\n      });\n    },\n    prepend() {\n      for (var _len4 = arguments.length, values = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        values[_key4] = arguments[_key4];\n      }\n      dispatch(state => $0d86e9c8f07f9a7b$var$insert(state, 0, ...values));\n    },\n    append() {\n      for (var _len5 = arguments.length, values = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        values[_key5] = arguments[_key5];\n      }\n      dispatch(state => $0d86e9c8f07f9a7b$var$insert(state, state.items.length, ...values));\n    },\n    remove() {\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        keys[_key6] = arguments[_key6];\n      }\n      dispatch(state => {\n        let keySet = new Set(keys);\n        let items = state.items.filter(item => !keySet.has(getKey(item)));\n        let selection = 'all';\n        if (state.selectedKeys !== 'all') {\n          selection = new Set(state.selectedKeys);\n          for (let key of keys) selection.delete(key);\n        }\n        if (cursor == null && items.length === 0) selection = new Set();\n        return {\n          ...state,\n          items: items,\n          selectedKeys: selection\n        };\n      });\n    },\n    removeSelectedItems() {\n      dispatch(state => {\n        if (state.selectedKeys === 'all') return {\n          ...state,\n          items: [],\n          selectedKeys: new Set()\n        };\n        let selectedKeys = state.selectedKeys;\n        let items = state.items.filter(item => !selectedKeys.has(getKey(item)));\n        return {\n          ...state,\n          items: items,\n          selectedKeys: new Set()\n        };\n      });\n    },\n    move(key, toIndex) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) return state;\n        let copy = state.items.slice();\n        let [item1] = copy.splice(index, 1);\n        copy.splice(toIndex, 0, item1);\n        return {\n          ...state,\n          items: copy\n        };\n      });\n    },\n    moveBefore(key1, keys) {\n      dispatch(state => {\n        let toIndex = state.items.findIndex(item => getKey(item) === key1);\n        if (toIndex === -1) return state;\n        // Find indices of keys to move. Sort them so that the order in the list is retained.\n        let keyArray = Array.isArray(keys) ? keys : [...keys];\n        let indices = keyArray.map(key => state.items.findIndex(item => getKey(item) === key)).sort();\n        return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex);\n      });\n    },\n    moveAfter(key2, keys) {\n      dispatch(state => {\n        let toIndex = state.items.findIndex(item => getKey(item) === key2);\n        if (toIndex === -1) return state;\n        let keyArray = Array.isArray(keys) ? keys : [...keys];\n        let indices = keyArray.map(key => state.items.findIndex(item => getKey(item) === key)).sort();\n        return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex + 1);\n      });\n    },\n    update(key, newValue) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) return state;\n        return {\n          ...state,\n          items: [...state.items.slice(0, index), newValue, ...state.items.slice(index + 1)]\n        };\n      });\n    }\n  };\n}\nfunction $0d86e9c8f07f9a7b$var$insert(state, index) {\n  for (var _len7 = arguments.length, values = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {\n    values[_key7 - 2] = arguments[_key7];\n  }\n  return {\n    ...state,\n    items: [...state.items.slice(0, index), ...values, ...state.items.slice(index)]\n  };\n}\nfunction $0d86e9c8f07f9a7b$var$move(state, indices, toIndex) {\n  // Shift the target down by the number of items being moved from before the target\n  for (let index of indices) if (index < toIndex) toIndex--;\n  let moves = indices.map(from => ({\n    from: from,\n    to: toIndex++\n  }));\n  // Shift later from indices down if they have a larger index\n  for (let i = 0; i < moves.length; i++) {\n    let a = moves[i].from;\n    for (let j = i; j < moves.length; j++) {\n      let b = moves[j].from;\n      if (b > a) moves[j].from--;\n    }\n  }\n  // Interleave the moves so they can be applied one by one rather than all at once\n  for (let i1 = 0; i1 < moves.length; i1++) {\n    let a = moves[i1];\n    for (let j = moves.length - 1; j > i1; j--) {\n      let b = moves[j];\n      if (b.from < a.to) a.to++;else b.from++;\n    }\n  }\n  let copy = state.items.slice();\n  for (let move of moves) {\n    let [item] = copy.splice(move.from, 1);\n    copy.splice(move.to, 0, item);\n  }\n  return {\n    ...state,\n    items: copy\n  };\n}\nfunction $f86e6c1ec7da6ebb$var$reducer(data, action) {\n  let selectedKeys;\n  switch (data.state) {\n    case 'idle':\n    case 'error':\n      switch (action.type) {\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n        case 'filtering':\n          var _filterText, _sortDescriptor;\n          return {\n            ...data,\n            filterText: (_filterText = action.filterText) !== null && _filterText !== void 0 ? _filterText : data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            sortDescriptor: (_sortDescriptor = action.sortDescriptor) !== null && _sortDescriptor !== void 0 ? _sortDescriptor : data.sortDescriptor,\n            abortController: action.abortController\n          };\n        case 'update':\n          return {\n            ...data,\n            ...action.updater(data)\n          };\n        case 'success':\n        case 'error':\n          return data;\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    case 'loading':\n    case 'sorting':\n    case 'filtering':\n      switch (action.type) {\n        case 'success':\n          // Ignore if there is a newer abortcontroller in state.\n          // This means that multiple requests were going at once.\n          // We want to take only the latest result.\n          if (action.abortController !== data.abortController) return data;\n          var _selectedKeys;\n          selectedKeys = (_selectedKeys = action.selectedKeys) !== null && _selectedKeys !== void 0 ? _selectedKeys : data.selectedKeys;\n          var _filterText1, _sortDescriptor1;\n          return {\n            ...data,\n            filterText: (_filterText1 = action.filterText) !== null && _filterText1 !== void 0 ? _filterText1 : data.filterText,\n            state: 'idle',\n            items: [...action.items],\n            selectedKeys: selectedKeys === 'all' ? 'all' : new Set(selectedKeys),\n            sortDescriptor: (_sortDescriptor1 = action.sortDescriptor) !== null && _sortDescriptor1 !== void 0 ? _sortDescriptor1 : data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          };\n        case 'error':\n          if (action.abortController !== data.abortController) return data;\n          return {\n            ...data,\n            state: 'error',\n            error: action.error,\n            abortController: null\n          };\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n        case 'filtering':\n          // We're already loading, and another load was triggered at the same time.\n          // We need to abort the previous load and start a new one.\n          data.abortController.abort();\n          var _filterText2;\n          return {\n            ...data,\n            filterText: (_filterText2 = action.filterText) !== null && _filterText2 !== void 0 ? _filterText2 : data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          };\n        case 'update':\n          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).\n          // Update data but don't abort previous load.\n          return {\n            ...data,\n            ...action.updater(data)\n          };\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    case 'loadingMore':\n      switch (action.type) {\n        case 'success':\n          var _selectedKeys1;\n          selectedKeys = data.selectedKeys === 'all' || action.selectedKeys === 'all' ? 'all' : new Set([...data.selectedKeys, ...((_selectedKeys1 = action.selectedKeys) !== null && _selectedKeys1 !== void 0 ? _selectedKeys1 : [])]);\n          var _sortDescriptor2;\n          // Append the new items\n          return {\n            ...data,\n            state: 'idle',\n            items: [...data.items, ...action.items],\n            selectedKeys: selectedKeys,\n            sortDescriptor: (_sortDescriptor2 = action.sortDescriptor) !== null && _sortDescriptor2 !== void 0 ? _sortDescriptor2 : data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          };\n        case 'error':\n          if (action.abortController !== data.abortController) return data;\n          return {\n            ...data,\n            state: 'error',\n            error: action.error\n          };\n        case 'loading':\n        case 'sorting':\n        case 'filtering':\n          // We're already loading more, and another load was triggered at the same time.\n          // We need to abort the previous load more and start a new one.\n          data.abortController.abort();\n          var _filterText3;\n          return {\n            ...data,\n            filterText: (_filterText3 = action.filterText) !== null && _filterText3 !== void 0 ? _filterText3 : data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          };\n        case 'loadingMore':\n          // If already loading more and another loading more is triggered, abort the new load more since\n          // it is a duplicate request since the cursor hasn't been updated.\n          // Do not overwrite the data.abortController\n          action.abortController.abort();\n          return data;\n        case 'update':\n          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).\n          // Update data but don't abort previous load.\n          return {\n            ...data,\n            ...action.updater(data)\n          };\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    default:\n      throw new Error(`Invalid state \"${data.state}\"`);\n  }\n}\nfunction $f86e6c1ec7da6ebb$export$bc3384a35de93d66(options) {\n  const {\n    load: load,\n    sort: sort,\n    initialSelectedKeys: initialSelectedKeys,\n    initialSortDescriptor: initialSortDescriptor,\n    getKey = item => item.id || item.key,\n    initialFilterText = ''\n  } = options;\n  let [data, dispatch] = $d70Aq$useReducer($f86e6c1ec7da6ebb$var$reducer, {\n    state: 'idle',\n    error: null,\n    items: [],\n    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys),\n    sortDescriptor: initialSortDescriptor,\n    filterText: initialFilterText\n  });\n  const dispatchFetch = async (action, fn) => {\n    let abortController = new AbortController();\n    try {\n      dispatch({\n        ...action,\n        abortController: abortController\n      });\n      var _filterText;\n      let previousFilterText = (_filterText = action.filterText) !== null && _filterText !== void 0 ? _filterText : data.filterText;\n      var _sortDescriptor;\n      let response = await fn({\n        items: data.items.slice(),\n        selectedKeys: data.selectedKeys,\n        sortDescriptor: (_sortDescriptor = action.sortDescriptor) !== null && _sortDescriptor !== void 0 ? _sortDescriptor : data.sortDescriptor,\n        signal: abortController.signal,\n        cursor: action.type === 'loadingMore' ? data.cursor : null,\n        filterText: previousFilterText\n      });\n      var _filterText4;\n      let filterText = (_filterText4 = response.filterText) !== null && _filterText4 !== void 0 ? _filterText4 : previousFilterText;\n      dispatch({\n        type: 'success',\n        ...response,\n        abortController: abortController\n      });\n      // Fetch a new filtered list if filterText is updated via `load` response func rather than list.setFilterText\n      // Only do this if not aborted (e.g. user triggers another filter action before load completes)\n      if (filterText && filterText !== previousFilterText && !abortController.signal.aborted) dispatchFetch({\n        type: 'filtering',\n        filterText: filterText\n      }, load);\n    } catch (e) {\n      dispatch({\n        type: 'error',\n        error: e,\n        abortController: abortController\n      });\n    }\n  };\n  $d70Aq$useEffect(() => {\n    dispatchFetch({\n      type: 'loading'\n    }, load);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    items: data.items,\n    selectedKeys: data.selectedKeys,\n    sortDescriptor: data.sortDescriptor,\n    isLoading: data.state === 'loading' || data.state === 'loadingMore' || data.state === 'sorting' || data.state === 'filtering',\n    loadingState: data.state,\n    error: data.error,\n    filterText: data.filterText,\n    getItem(key) {\n      return data.items.find(item => getKey(item) === key);\n    },\n    reload() {\n      dispatchFetch({\n        type: 'loading'\n      }, load);\n    },\n    loadMore() {\n      // Ignore if already loading more or if performing server side filtering.\n      if (data.state === 'loadingMore' || data.state === 'filtering' || data.cursor == null) return;\n      dispatchFetch({\n        type: 'loadingMore'\n      }, load);\n    },\n    sort(sortDescriptor) {\n      dispatchFetch({\n        type: 'sorting',\n        sortDescriptor: sortDescriptor\n      }, sort || load);\n    },\n    ...$0d86e9c8f07f9a7b$export$79c0c687a5963b0a({\n      ...options,\n      getKey: getKey,\n      cursor: data.cursor\n    }, fn => {\n      dispatch({\n        type: 'update',\n        updater: fn\n      });\n    }),\n    setFilterText(filterText) {\n      dispatchFetch({\n        type: 'filtering',\n        filterText: filterText\n      }, load);\n    }\n  };\n}\nfunction $be2ea0343af54212$export$d14e1352e21f4a16(options) {\n  let {\n    initialItems: initialItems1 = [],\n    initialSelectedKeys: initialSelectedKeys,\n    getKey = item => item.id || item.key,\n    getChildren = item => item.children\n  } = options;\n  let map = $d70Aq$useMemo(() => new Map(), []);\n  // We only want to compute this on initial render.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  let initialNodes = $d70Aq$useMemo(() => buildTree(initialItems1), []);\n  let [items1, setItems] = $d70Aq$useState(initialNodes);\n  let [selectedKeys, setSelectedKeys] = $d70Aq$useState(new Set(initialSelectedKeys || []));\n  function buildTree() {\n    let initialItems = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let parentKey = arguments.length > 1 ? arguments[1] : undefined;\n    return initialItems.map(item => {\n      let node = {\n        key: getKey(item),\n        parentKey: parentKey,\n        value: item,\n        children: null\n      };\n      node.children = buildTree(getChildren(item), node.key);\n      map.set(node.key, node);\n      return node;\n    });\n  }\n  function updateTree(items, key, update) {\n    let node = map.get(key);\n    if (!node) return items;\n    // Create a new node. If null, then delete the node, otherwise replace.\n    let newNode = update(node);\n    if (newNode == null) deleteNode(node);else addNode(newNode);\n    // Walk up the tree and update each parent to refer to the new chilren.\n    while (node.parentKey) {\n      let nextParent = map.get(node.parentKey);\n      let copy = {\n        key: nextParent.key,\n        parentKey: nextParent.parentKey,\n        value: nextParent.value,\n        children: null\n      };\n      let children = nextParent.children;\n      if (newNode == null) children = children.filter(c => c !== node);\n      copy.children = children.map(child => {\n        if (child === node) return newNode;\n        return child;\n      });\n      map.set(copy.key, copy);\n      newNode = copy;\n      node = nextParent;\n    }\n    if (newNode == null) items = items.filter(c => c !== node);\n    return items.map(item => {\n      if (item === node) return newNode;\n      return item;\n    });\n  }\n  function addNode(node) {\n    map.set(node.key, node);\n    for (let child of node.children) addNode(child);\n  }\n  function deleteNode(node) {\n    map.delete(node.key);\n    for (let child of node.children) deleteNode(child);\n  }\n  return {\n    items: items1,\n    selectedKeys: selectedKeys,\n    setSelectedKeys: setSelectedKeys,\n    getItem(key) {\n      return map.get(key);\n    },\n    insert(parentKey, index) {\n      for (var _len8 = arguments.length, values = new Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {\n        values[_key8 - 2] = arguments[_key8];\n      }\n      setItems(items => {\n        let nodes = buildTree(values, parentKey);\n        // If parentKey is null, insert into the root.\n        if (parentKey == null) return [...items.slice(0, index), ...nodes, ...items.slice(index)];\n        // Otherwise, update the parent node and its ancestors.\n        return updateTree(items, parentKey, parentNode => ({\n          key: parentNode.key,\n          parentKey: parentNode.parentKey,\n          value: parentNode.value,\n          children: [...parentNode.children.slice(0, index), ...nodes, ...parentNode.children.slice(index)]\n        }));\n      });\n    },\n    insertBefore(key) {\n      let node = map.get(key);\n      if (!node) return;\n      let parentNode = map.get(node.parentKey);\n      let nodes = parentNode ? parentNode.children : items1;\n      let index = nodes.indexOf(node);\n      for (var _len9 = arguments.length, values = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n        values[_key9 - 1] = arguments[_key9];\n      }\n      this.insert(parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index, ...values);\n    },\n    insertAfter(key) {\n      let node = map.get(key);\n      if (!node) return;\n      let parentNode = map.get(node.parentKey);\n      let nodes = parentNode ? parentNode.children : items1;\n      let index = nodes.indexOf(node);\n      for (var _len10 = arguments.length, values = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n        values[_key10 - 1] = arguments[_key10];\n      }\n      this.insert(parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index + 1, ...values);\n    },\n    prepend(parentKey) {\n      for (var _len11 = arguments.length, values = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n        values[_key11 - 1] = arguments[_key11];\n      }\n      this.insert(parentKey, 0, ...values);\n    },\n    append(parentKey) {\n      for (var _len12 = arguments.length, values = new Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {\n        values[_key12 - 1] = arguments[_key12];\n      }\n      if (parentKey == null) this.insert(null, items1.length, ...values);else {\n        let parentNode = map.get(parentKey);\n        if (!parentNode) return;\n        this.insert(parentKey, parentNode.children.length, ...values);\n      }\n    },\n    remove() {\n      let newItems = items1;\n      for (var _len13 = arguments.length, keys = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n        keys[_key13] = arguments[_key13];\n      }\n      for (let key of keys) newItems = updateTree(newItems, key, () => null);\n      setItems(newItems);\n      let selection = new Set(selectedKeys);\n      for (let key1 of selectedKeys) if (!map.has(key1)) selection.delete(key1);\n      setSelectedKeys(selection);\n    },\n    removeSelectedItems() {\n      this.remove(...selectedKeys);\n    },\n    move(key, toParentKey, index) {\n      setItems(items => {\n        let node = map.get(key);\n        if (!node) return items;\n        items = updateTree(items, key, () => null);\n        const movedNode = {\n          ...node,\n          parentKey: toParentKey\n        };\n        return updateTree(items, toParentKey, parentNode => ({\n          key: parentNode.key,\n          parentKey: parentNode.parentKey,\n          value: parentNode.value,\n          children: [...parentNode.children.slice(0, index), movedNode, ...parentNode.children.slice(index)]\n        }));\n      });\n    },\n    update(oldKey, newValue) {\n      setItems(items => updateTree(items, oldKey, oldNode => {\n        let node = {\n          key: oldNode.key,\n          parentKey: oldNode.parentKey,\n          value: newValue,\n          children: null\n        };\n        node.children = buildTree(getChildren(newValue), node.key);\n        return node;\n      }));\n    }\n  };\n}\nexport { $f86e6c1ec7da6ebb$export$bc3384a35de93d66 as useAsyncList, $be2ea0343af54212$export$d14e1352e21f4a16 as useTreeData, $0d86e9c8f07f9a7b$export$762f73dccccd255d as useListData };","map":{"version":3,"names":["$0d86e9c8f07f9a7b$export$762f73dccccd255d","options","initialItems","initialSelectedKeys","getKey","item","id","key","filter","initialFilterText","state","setState","$d70Aq$useState","items","selectedKeys","Set","filterText","filteredItems","$d70Aq$useMemo","$0d86e9c8f07f9a7b$export$79c0c687a5963b0a","getItem","find","opts","dispatch","cursor","setSelectedKeys","setFilterText","insert","index","_len","arguments","length","values","Array","_key","$0d86e9c8f07f9a7b$var$insert","insertBefore","_len2","_key2","findIndex","insertAfter","_len3","_key3","prepend","_len4","_key4","append","_len5","_key5","remove","_len6","keys","_key6","keySet","has","selection","delete","removeSelectedItems","move","toIndex","copy","slice","item1","splice","moveBefore","key1","keyArray","isArray","indices","map","sort","$0d86e9c8f07f9a7b$var$move","moveAfter","key2","update","newValue","_len7","_key7","moves","from","to","i","a","j","b","i1","$f86e6c1ec7da6ebb$var$reducer","data","action","type","_filterText","_sortDescriptor","sortDescriptor","abortController","updater","Error","_selectedKeys","_filterText1","_sortDescriptor1","error","abort","_filterText2","_selectedKeys1","_sortDescriptor2","_filterText3","$f86e6c1ec7da6ebb$export$bc3384a35de93d66","load","initialSortDescriptor","$d70Aq$useReducer","dispatchFetch","fn","AbortController","previousFilterText","response","signal","_filterText4","aborted","e","$d70Aq$useEffect","isLoading","loadingState","reload","loadMore","$be2ea0343af54212$export$d14e1352e21f4a16","initialItems1","getChildren","children","Map","initialNodes","buildTree","items1","setItems","undefined","parentKey","node","value","set","updateTree","get","newNode","deleteNode","addNode","nextParent","c","child","_len8","_key8","nodes","parentNode","indexOf","_len9","_key9","_len10","_key10","_len11","_key11","_len12","_key12","newItems","_len13","_key13","toParentKey","movedNode","oldKey","oldNode"],"sources":["C:\\Users\\Dmitry\\Desktop\\JS\\untitled2\\zaebalo\\node_modules\\@react-stately\\data\\dist\\packages\\@react-stately\\data\\src\\index.ts","C:\\Users\\Dmitry\\Desktop\\JS\\untitled2\\zaebalo\\node_modules\\@react-stately\\data\\dist\\packages\\@react-stately\\data\\src\\useAsyncList.ts","C:\\Users\\Dmitry\\Desktop\\JS\\untitled2\\zaebalo\\node_modules\\@react-stately\\data\\dist\\packages\\@react-stately\\data\\src\\useListData.ts","C:\\Users\\Dmitry\\Desktop\\JS\\untitled2\\zaebalo\\node_modules\\@react-stately\\data\\dist\\packages\\@react-stately\\data\\src\\useTreeData.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useAsyncList} from './useAsyncList';\nexport {useTreeData} from './useTreeData';\nexport {useListData} from './useListData';\n\nexport type {ListOptions, ListData} from './useListData';\nexport type {AsyncListOptions, AsyncListData} from './useAsyncList';\nexport type {TreeOptions, TreeData} from './useTreeData';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createListActions, ListData, ListState} from './useListData';\nimport {Key, Reducer, useEffect, useReducer} from 'react';\nimport {LoadingState, Selection, SortDescriptor} from '@react-types/shared';\n\nexport interface AsyncListOptions<T, C> {\n  /** The keys for the initially selected items. */\n  initialSelectedKeys?: Iterable<Key>,\n  /** The initial sort descriptor. */\n  initialSortDescriptor?: SortDescriptor,\n  /** The initial filter text. */\n  initialFilterText?: string,\n  /** A function that returns a unique key for an item object. */\n  getKey?: (item: T) => Key,\n  /** A function that loads the data for the items in the list. */\n  load: AsyncListLoadFunction<T, C>,\n  /**\n   * An optional function that performs sorting. If not provided,\n   * then `sortDescriptor` is passed to the `load` function.\n   */\n  sort?: AsyncListLoadFunction<T, C>\n}\n\ntype AsyncListLoadFunction<T, C> = (state: AsyncListLoadOptions<T, C>) => AsyncListStateUpdate<T, C> | Promise<AsyncListStateUpdate<T, C>>;\n\ninterface AsyncListLoadOptions<T, C> {\n  /** The items currently in the list. */\n  items: T[],\n  /** The keys of the currently selected items in the list. */\n  selectedKeys: Selection,\n  /** The current sort descriptor for the list. */\n  sortDescriptor: SortDescriptor,\n  /** An abort signal used to notify the load function that the request has been aborted. */\n  signal: AbortSignal,\n  /** The pagination cursor returned from the last page load. */\n  cursor?: C,\n  /** The current filter text used to perform server side filtering. */\n  filterText?: string,\n  /** The current loading state of the list. */\n  loadingState?: LoadingState\n}\n\ninterface AsyncListStateUpdate<T, C> {\n  /** The new items to append to the list. */\n  items: Iterable<T>,\n  /** The keys to add to the selection. */\n  selectedKeys?: Iterable<Key>,\n  /** The sort descriptor to set. */\n  sortDescriptor?: SortDescriptor,\n  /** The pagination cursor to be used for the next page load. */\n  cursor?: C,\n  /** The updated filter text for the list. */\n  filterText?: string\n}\n\ninterface AsyncListState<T, C> extends ListState<T> {\n  state: LoadingState,\n  items: T[],\n  // disabledKeys?: Iterable<Key>,\n  selectedKeys: Selection,\n  // selectedKey?: Key,\n  // expandedKeys?: Iterable<Key>,\n  sortDescriptor?: SortDescriptor,\n  error?: Error,\n  abortController?: AbortController,\n  cursor?: C\n}\n\ntype ActionType = 'success' | 'error' | 'loading' | 'loadingMore' | 'sorting' | 'update' | 'filtering';\ninterface Action<T, C> {\n  type: ActionType,\n  items?: Iterable<T>,\n  selectedKeys?: Iterable<Key>,\n  sortDescriptor?: SortDescriptor,\n  error?: Error,\n  abortController?: AbortController,\n  updater?: (state: ListState<T>) => ListState<T>,\n  cursor?: C,\n  filterText?: string\n}\n\nexport interface AsyncListData<T> extends ListData<T> {\n  /** Whether data is currently being loaded. */\n  isLoading: boolean,\n  /** If loading data failed, then this contains the error that occurred. */\n  error?: Error,\n  // disabledKeys?: Set<Key>,\n  // selectedKey?: Key,\n  // expandedKeys?: Set<Key>,\n  /** The current sort descriptor for the list. */\n  sortDescriptor?: SortDescriptor,\n\n  /** Reloads the data in the list. */\n  reload(): void,\n  /** Loads the next page of data in the list. */\n  loadMore(): void,\n  /** Triggers sorting for the list. */\n  sort(descriptor: SortDescriptor): void,\n  /** The current loading state for the list. */\n  loadingState: LoadingState\n}\n\nfunction reducer<T, C>(data: AsyncListState<T, C>, action: Action<T, C>): AsyncListState<T, C> {\n  let selectedKeys;\n  switch (data.state) {\n    case 'idle':\n    case 'error':\n      switch (action.type) {\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n        case 'filtering':\n          return {\n            ...data,\n            filterText: action.filterText ?? data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n            abortController: action.abortController\n          };\n        case 'update':\n          return {\n            ...data,\n            ...action.updater(data)\n          };\n        case 'success':\n        case 'error':\n          return data;\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    case 'loading':\n    case 'sorting':\n    case 'filtering':\n      switch (action.type) {\n        case 'success':\n          // Ignore if there is a newer abortcontroller in state.\n          // This means that multiple requests were going at once.\n          // We want to take only the latest result.\n          if (action.abortController !== data.abortController) {\n            return data;\n          }\n\n          selectedKeys = action.selectedKeys ?? data.selectedKeys;\n          return {\n            ...data,\n            filterText: action.filterText ?? data.filterText,\n            state: 'idle',\n            items: [...action.items],\n            selectedKeys: selectedKeys === 'all' ? 'all' : new Set(selectedKeys),\n            sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          };\n        case 'error':\n          if (action.abortController !== data.abortController) {\n            return data;\n          }\n\n          return {\n            ...data,\n            state: 'error',\n            error: action.error,\n            abortController: null\n          };\n        case 'loading':\n        case 'loadingMore':\n        case 'sorting':\n        case 'filtering':\n          // We're already loading, and another load was triggered at the same time.\n          // We need to abort the previous load and start a new one.\n          data.abortController.abort();\n          return {\n            ...data,\n            filterText: action.filterText ?? data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          };\n        case 'update':\n          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).\n          // Update data but don't abort previous load.\n          return {\n            ...data,\n            ...action.updater(data)\n          };\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    case 'loadingMore':\n      switch (action.type) {\n        case 'success':\n          selectedKeys = (data.selectedKeys === 'all' || action.selectedKeys === 'all')\n            ? 'all'\n            : new Set([...data.selectedKeys, ...(action.selectedKeys ?? [])]);\n          // Append the new items\n          return {\n            ...data,\n            state: 'idle',\n            items: [...data.items, ...action.items],\n            selectedKeys,\n            sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n            abortController: null,\n            cursor: action.cursor\n          };\n        case 'error':\n          if (action.abortController !== data.abortController) {\n            return data;\n          }\n\n          return {\n            ...data,\n            state: 'error',\n            error: action.error\n          };\n        case 'loading':\n        case 'sorting':\n        case 'filtering':\n          // We're already loading more, and another load was triggered at the same time.\n          // We need to abort the previous load more and start a new one.\n          data.abortController.abort();\n          return {\n            ...data,\n            filterText: action.filterText ?? data.filterText,\n            state: action.type,\n            // Reset items to an empty list if loading, but not when sorting.\n            items: action.type === 'loading' ? [] : data.items,\n            abortController: action.abortController\n          };\n        case 'loadingMore':\n          // If already loading more and another loading more is triggered, abort the new load more since\n          // it is a duplicate request since the cursor hasn't been updated.\n          // Do not overwrite the data.abortController\n          action.abortController.abort();\n\n          return data;\n        case 'update':\n          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).\n          // Update data but don't abort previous load.\n          return {\n            ...data,\n            ...action.updater(data)\n          };\n        default:\n          throw new Error(`Invalid action \"${action.type}\" in state \"${data.state}\"`);\n      }\n    default:\n      throw new Error(`Invalid state \"${data.state}\"`);\n  }\n}\n\n/**\n * Manages state for an immutable async loaded list data structure, and provides convenience methods to\n * update the data over time. Manages loading and error states, pagination, and sorting.\n */\nexport function useAsyncList<T, C = string>(options: AsyncListOptions<T, C>): AsyncListData<T> {\n  const {\n    load,\n    sort,\n    initialSelectedKeys,\n    initialSortDescriptor,\n    getKey = (item: any) => item.id || item.key,\n    initialFilterText = ''\n  } = options;\n\n  let [data, dispatch] = useReducer<Reducer<AsyncListState<T, C>, Action<T, C>>>(reducer, {\n    state: 'idle',\n    error: null,\n    items: [],\n    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys),\n    sortDescriptor: initialSortDescriptor,\n    filterText: initialFilterText\n  });\n\n  const dispatchFetch = async (action: Action<T, C>, fn: AsyncListLoadFunction<T, C>) => {\n    let abortController = new AbortController();\n    try {\n      dispatch({...action, abortController});\n      let previousFilterText = action.filterText ?? data.filterText;\n\n      let response = await fn({\n        items: data.items.slice(),\n        selectedKeys: data.selectedKeys,\n        sortDescriptor: action.sortDescriptor ?? data.sortDescriptor,\n        signal: abortController.signal,\n        cursor: action.type === 'loadingMore' ? data.cursor : null,\n        filterText: previousFilterText\n      });\n\n      let filterText = response.filterText ?? previousFilterText;\n      dispatch({type: 'success', ...response, abortController});\n\n      // Fetch a new filtered list if filterText is updated via `load` response func rather than list.setFilterText\n      // Only do this if not aborted (e.g. user triggers another filter action before load completes)\n      if (filterText && (filterText !== previousFilterText) && !abortController.signal.aborted) {\n        dispatchFetch({type: 'filtering', filterText}, load);\n      }\n    } catch (e) {\n      dispatch({type: 'error', error: e, abortController});\n    }\n  };\n\n  useEffect(() => {\n    dispatchFetch({type: 'loading'}, load);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    items: data.items,\n    selectedKeys: data.selectedKeys,\n    sortDescriptor: data.sortDescriptor,\n    isLoading: data.state === 'loading' || data.state === 'loadingMore' || data.state === 'sorting' || data.state === 'filtering',\n    loadingState: data.state,\n    error: data.error,\n    filterText: data.filterText,\n    getItem(key: Key) {\n      return data.items.find(item => getKey(item) === key);\n    },\n    reload() {\n      dispatchFetch({type: 'loading'}, load);\n    },\n    loadMore() {\n      // Ignore if already loading more or if performing server side filtering.\n      if (data.state === 'loadingMore' || data.state === 'filtering' || data.cursor == null) {\n        return;\n      }\n\n      dispatchFetch({type: 'loadingMore'}, load);\n    },\n    sort(sortDescriptor: SortDescriptor) {\n      dispatchFetch({type: 'sorting', sortDescriptor}, sort || load);\n    },\n    ...createListActions({...options, getKey, cursor: data.cursor}, fn => {\n      dispatch({type: 'update', updater: fn});\n    }),\n    setFilterText(filterText: string) {\n      dispatchFetch({type: 'filtering', filterText}, load);\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useMemo, useState} from 'react';\nimport {Selection} from '@react-types/shared';\n\nexport interface ListOptions<T> {\n  /** Initial items in the list. */\n  initialItems?: T[],\n  /** The keys for the initially selected items. */\n  initialSelectedKeys?: 'all' | Iterable<Key>,\n  /** The initial text to filter the list by. */\n  initialFilterText?: string,\n  /** A function that returns a unique key for an item object. */\n  getKey?: (item: T) => Key,\n  /** A function that returns whether a item matches the current filter text. */\n  filter?: (item: T, filterText: string) => boolean\n}\n\nexport interface ListData<T> {\n  /** The items in the list. */\n  items: T[],\n\n  /** The keys of the currently selected items in the list. */\n  selectedKeys: Selection,\n\n  /** Sets the selected keys. */\n  setSelectedKeys(keys: Selection): void,\n\n  /** The current filter text. */\n  filterText: string,\n\n  /** Sets the filter text. */\n  setFilterText(filterText: string): void,\n\n  /**\n   * Gets an item from the list by key.\n   * @param key - The key of the item to retrieve.\n   */\n  getItem(key: Key): T,\n\n  /**\n   * Inserts items into the list at the given index.\n   * @param index - The index to insert into.\n   * @param values - The values to insert.\n   */\n  insert(index: number, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list before the item at the given key.\n   * @param key - The key of the item to insert before.\n   * @param values - The values to insert.\n   */\n  insertBefore(key: Key, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list after the item at the given key.\n   * @param key - The key of the item to insert after.\n   * @param values - The values to insert.\n   */\n  insertAfter(key: Key, ...values: T[]): void,\n\n  /**\n   * Appends items to the list.\n   * @param values - The values to insert.\n   */\n  append(...values: T[]): void,\n\n  /**\n   * Prepends items to the list.\n   * @param value - The value to insert.\n   */\n  prepend(...values: T[]): void,\n\n  /**\n   * Removes items from the list by their keys.\n   * @param keys - The keys of the item to remove.\n   */\n  remove(...keys: Key[]): void,\n\n  /**\n   * Removes all items from the list that are currently\n   * in the set of selected items.\n   */\n  removeSelectedItems(): void,\n\n  /**\n   * Moves an item within the list.\n   * @param key - The key of the item to move.\n   * @param toIndex - The index to move the item to.\n   */\n  move(key: Key, toIndex: number): void,\n\n  /**\n   * Moves one or more items before a given key.\n   * @param key - The key of the item to move the items before.\n   * @param keys - The keys of the items to move.\n   */\n  moveBefore(key: Key, keys: Iterable<Key>): void,\n\n  /**\n   * Moves one or more items after a given key.\n   * @param key - The key of the item to move the items after.\n   * @param keys - The keys of the items to move.\n   */\n  moveAfter(key: Key, keys: Iterable<Key>): void,\n\n  /**\n   * Updates an item in the list.\n   * @param key - The key of the item to update.\n   * @param newValue - The new value for the item.\n   */\n  update(key: Key, newValue: T): void\n}\n\nexport interface ListState<T> {\n  items: T[],\n  selectedKeys: Selection,\n  filterText: string\n}\n\ninterface CreateListOptions<T, C> extends ListOptions<T> {\n  cursor?: C\n}\n\n/**\n * Manages state for an immutable list data structure, and provides convenience methods to\n * update the data over time.\n */\nexport function useListData<T>(options: ListOptions<T>): ListData<T> {\n  let {\n    initialItems = [],\n    initialSelectedKeys,\n    getKey = (item: any) => item.id || item.key,\n    filter,\n    initialFilterText = ''\n  } = options;\n\n  // Store both items and filteredItems in state so we can go back to the unfiltered list\n  let [state, setState] = useState<ListState<T>>({\n    items: initialItems,\n    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys || []),\n    filterText: initialFilterText\n  });\n\n  let filteredItems = useMemo(\n    () => filter ? state.items.filter(item => filter(item, state.filterText)) : state.items,\n    [state.items, state.filterText, filter]);\n\n  return {\n    ...state,\n    items: filteredItems,\n    ...createListActions({getKey}, setState),\n    getItem(key: Key) {\n      return state.items.find(item => getKey(item) === key);\n    }\n  };\n}\n\nexport function createListActions<T, C>(opts: CreateListOptions<T, C>, dispatch: (updater: (state: ListState<T>) => ListState<T>) => void): Omit<ListData<T>, 'items' | 'selectedKeys' | 'getItem' | 'filterText'> {\n  let {cursor, getKey} = opts;\n  return {\n    setSelectedKeys(selectedKeys: Selection) {\n      dispatch(state => ({\n        ...state,\n        selectedKeys\n      }));\n    },\n    setFilterText(filterText: string) {\n      dispatch(state => ({\n        ...state,\n        filterText\n      }));\n    },\n    insert(index: number, ...values: T[]) {\n      dispatch(state => insert(state, index, ...values));\n    },\n    insertBefore(key: Key, ...values: T[]) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return;\n        }\n\n        return insert(state, index, ...values);\n      });\n    },\n    insertAfter(key: Key, ...values: T[]) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return;\n        }\n\n        return insert(state, index + 1, ...values);\n      });\n    },\n    prepend(...values: T[]) {\n      dispatch(state => insert(state, 0, ...values));\n    },\n    append(...values: T[]) {\n      dispatch(state => insert(state, state.items.length, ...values));\n    },\n    remove(...keys: Key[]) {\n      dispatch(state => {\n        let keySet = new Set(keys);\n        let items = state.items.filter(item => !keySet.has(getKey(item)));\n\n        let selection: Selection = 'all';\n        if (state.selectedKeys !== 'all') {\n          selection = new Set(state.selectedKeys);\n          for (let key of keys) {\n            selection.delete(key);\n          }\n        }\n        if (cursor == null && items.length === 0) {\n          selection = new Set();\n        }\n\n        return {\n          ...state,\n          items,\n          selectedKeys: selection\n        };\n      });\n    },\n    removeSelectedItems() {\n      dispatch(state => {\n        if (state.selectedKeys === 'all') {\n          return {\n            ...state,\n            items: [],\n            selectedKeys: new Set()\n          };\n        }\n\n        let selectedKeys = state.selectedKeys;\n        let items = state.items.filter(item => !selectedKeys.has(getKey(item)));\n        return {\n          ...state,\n          items,\n          selectedKeys: new Set()\n        };\n      });\n    },\n    move(key: Key, toIndex: number) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return state;\n        }\n\n        let copy = state.items.slice();\n        let [item] = copy.splice(index, 1);\n        copy.splice(toIndex, 0, item);\n        return {\n          ...state,\n          items: copy\n        };\n      });\n    },\n    moveBefore(key: Key, keys: Iterable<Key>) {\n      dispatch(state => {\n        let toIndex = state.items.findIndex(item => getKey(item) === key);\n        if (toIndex === -1) {\n          return state;\n        }\n\n        // Find indices of keys to move. Sort them so that the order in the list is retained.\n        let keyArray = Array.isArray(keys) ? keys : [...keys];\n        let indices = keyArray.map(key => state.items.findIndex(item => getKey(item) === key)).sort();\n        return move(state, indices, toIndex);\n      });\n    },\n    moveAfter(key: Key, keys: Iterable<Key>) {\n      dispatch(state => {\n        let toIndex = state.items.findIndex(item => getKey(item) === key);\n        if (toIndex === -1) {\n          return state;\n        }\n\n        let keyArray = Array.isArray(keys) ? keys : [...keys];\n        let indices = keyArray.map(key => state.items.findIndex(item => getKey(item) === key)).sort();\n        return move(state, indices, toIndex + 1);\n      });\n    },\n    update(key: Key, newValue: T) {\n      dispatch(state => {\n        let index = state.items.findIndex(item => getKey(item) === key);\n        if (index === -1) {\n          return state;\n        }\n\n        return {\n          ...state,\n          items: [\n            ...state.items.slice(0, index),\n            newValue,\n            ...state.items.slice(index + 1)\n          ]\n        };\n      });\n    }\n  };\n}\n\nfunction insert<T>(state: ListState<T>, index: number, ...values: T[]): ListState<T> {\n  return {\n    ...state,\n    items: [\n      ...state.items.slice(0, index),\n      ...values,\n      ...state.items.slice(index)\n    ]\n  };\n}\n\nfunction move<T>(state: ListState<T>, indices: number[], toIndex: number): ListState<T> {\n  // Shift the target down by the number of items being moved from before the target\n  for (let index of indices) {\n    if (index < toIndex) {\n      toIndex--;\n    }\n  }\n\n  let moves = indices.map(from => ({\n    from,\n    to: toIndex++\n  }));\n\n  // Shift later from indices down if they have a larger index\n  for (let i = 0; i < moves.length; i++) {\n    let a = moves[i].from;\n    for (let j = i; j < moves.length; j++) {\n      let b = moves[j].from;\n\n      if (b > a) {\n        moves[j].from--;\n      }\n    }\n  }\n\n  // Interleave the moves so they can be applied one by one rather than all at once\n  for (let i = 0; i < moves.length; i++) {\n    let a = moves[i];\n    for (let j = moves.length - 1; j > i; j--) {\n      let b = moves[j];\n\n      if (b.from < a.to) {\n        a.to++;\n      } else {\n        b.from++;\n      }\n    }\n  }\n\n  let copy = state.items.slice();\n  for (let move of moves) {\n    let [item] = copy.splice(move.from, 1);\n    copy.splice(move.to, 0, item);\n  }\n\n  return {\n    ...state,\n    items: copy\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useMemo, useState} from 'react';\n\nexport interface TreeOptions<T extends object> {\n  /** Initial root items in the tree. */\n  initialItems?: T[],\n  /** The keys for the initially selected items. */\n  initialSelectedKeys?: Iterable<Key>,\n  /** A function that returns a unique key for an item object. */\n  getKey?: (item: T) => Key,\n  /** A function that returns the children for an item object. */\n  getChildren?: (item: T) => T[]\n}\n\ninterface TreeNode<T extends object> {\n  /** A unique key for the tree node. */\n  key: Key,\n  /** The key of the parent node. */\n  parentKey: Key,\n  /** The value object for the tree node. */\n  value: T,\n  /** Children of the tree node. */\n  children: TreeNode<T>[]\n}\n\nexport interface TreeData<T extends object> {\n  /** The root nodes in the tree. */\n  items: TreeNode<T>[],\n\n  /** The keys of the currently selected items in the tree. */\n  selectedKeys: Set<Key>,\n\n  /** Sets the selected keys. */\n  setSelectedKeys(keys: Set<Key>): void,\n\n  /**\n   * Gets a node from the tree by key.\n   * @param key - The key of the item to retrieve.\n   */\n  getItem(key: Key): TreeNode<T>,\n\n  /**\n   * Inserts an item into a parent node as a child.\n   * @param parentKey - The key of the parent item to insert into. `null` for the root.\n   * @param index - The index within the parent to insert into.\n   * @param value - The value to insert.\n   */\n  insert(parentKey: Key | null, index: number, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list before the item at the given key.\n   * @param key - The key of the item to insert before.\n   * @param values - The values to insert.\n   */\n  insertBefore(key: Key, ...values: T[]): void,\n\n  /**\n   * Inserts items into the list after the item at the given key.\n   * @param key - The key of the item to insert after.\n   * @param values - The values to insert.\n   */\n  insertAfter(key: Key, ...values: T[]): void,\n\n  /**\n   * Appends an item into a parent node as a child.\n   * @param parentKey - The key of the parent item to insert into. `null` for the root.\n   * @param value - The value to insert.\n   */\n  append(parentKey: Key | null, ...values: T[]): void,\n\n  /**\n   * Prepends an item into a parent node as a child.\n   * @param parentKey - The key of the parent item to insert into. `null` for the root.\n   * @param value - The value to insert.\n   */\n  prepend(parentKey: Key | null, ...value: T[]): void,\n\n  /**\n   * Removes an item from the tree by its key.\n   * @param key - The key of the item to remove.\n   */\n  remove(...keys: Key[]): void,\n\n  /**\n   * Removes all items from the tree that are currently\n   * in the set of selected items.\n   */\n  removeSelectedItems(): void,\n\n  /**\n   * Moves an item within the tree.\n   * @param key - The key of the item to move.\n   * @param toParentKey - The key of the new parent to insert into.\n   * @param index - The index within the new parent to insert at.\n   */\n  move(key: Key, toParentKey: Key, index: number): void,\n\n  /**\n   * Updates an item in the tree.\n   * @param key - The key of the item to update.\n   * @param newValue - The new value for the item.\n   */\n  update(key: Key, newValue: T): void\n}\n\n/**\n * Manages state for an immutable tree data structure, and provides convenience methods to\n * update the data over time.\n */\nexport function useTreeData<T extends object>(options: TreeOptions<T>): TreeData<T> {\n  let {\n    initialItems = [],\n    initialSelectedKeys,\n    getKey = (item: any) => item.id || item.key,\n    getChildren = (item: any) => item.children\n  } = options;\n  let map = useMemo(() => new Map<Key, TreeNode<T>>(), []);\n\n  // We only want to compute this on initial render.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  let initialNodes = useMemo(() => buildTree(initialItems), []);\n  let [items, setItems] = useState(initialNodes);\n  let [selectedKeys, setSelectedKeys] = useState(new Set<Key>(initialSelectedKeys || []));\n\n  function buildTree(initialItems: T[] = [], parentKey?: Key | null) {\n    return initialItems.map(item => {\n      let node: TreeNode<T> = {\n        key: getKey(item),\n        parentKey: parentKey,\n        value: item,\n        children: null\n      };\n\n      node.children = buildTree(getChildren(item), node.key);\n      map.set(node.key, node);\n      return node;\n    });\n  }\n\n  function updateTree(items: TreeNode<T>[], key: Key, update: (node: TreeNode<T>) => TreeNode<T>) {\n    let node = map.get(key);\n    if (!node) {\n      return items;\n    }\n\n    // Create a new node. If null, then delete the node, otherwise replace.\n    let newNode = update(node);\n    if (newNode == null) {\n      deleteNode(node);\n    } else {\n      addNode(newNode);\n    }\n\n    // Walk up the tree and update each parent to refer to the new chilren.\n    while (node.parentKey) {\n      let nextParent = map.get(node.parentKey);\n      let copy: TreeNode<T> = {\n        key: nextParent.key,\n        parentKey: nextParent.parentKey,\n        value: nextParent.value,\n        children: null\n      };\n\n      let children = nextParent.children;\n      if (newNode == null) {\n        children = children.filter(c => c !== node);\n      }\n\n      copy.children = children.map(child => {\n        if (child === node) {\n          return newNode;\n        }\n\n        return child;\n      });\n\n      map.set(copy.key, copy);\n\n      newNode = copy;\n      node = nextParent;\n    }\n\n    if (newNode == null) {\n      items = items.filter(c => c !== node);\n    }\n\n    return items.map(item => {\n      if (item === node) {\n        return newNode;\n      }\n\n      return item;\n    });\n  }\n\n  function addNode(node: TreeNode<T>) {\n    map.set(node.key, node);\n    for (let child of node.children) {\n      addNode(child);\n    }\n  }\n\n  function deleteNode(node: TreeNode<T>) {\n    map.delete(node.key);\n    for (let child of node.children) {\n      deleteNode(child);\n    }\n  }\n\n  return {\n    items,\n    selectedKeys,\n    setSelectedKeys,\n    getItem(key: Key) {\n      return map.get(key);\n    },\n    insert(parentKey: Key | null, index: number, ...values: T[]) {\n      setItems(items => {\n        let nodes = buildTree(values, parentKey);\n\n        // If parentKey is null, insert into the root.\n        if (parentKey == null) {\n          return [\n            ...items.slice(0, index),\n            ...nodes,\n            ...items.slice(index)\n          ];\n        }\n\n        // Otherwise, update the parent node and its ancestors.\n        return updateTree(items, parentKey, parentNode => ({\n          key: parentNode.key,\n          parentKey: parentNode.parentKey,\n          value: parentNode.value,\n          children: [\n            ...parentNode.children.slice(0, index),\n            ...nodes,\n            ...parentNode.children.slice(index)\n          ]\n        }));\n      });\n    },\n    insertBefore(key: Key, ...values: T[]): void {\n      let node = map.get(key);\n      if (!node) {\n        return;\n      }\n\n      let parentNode = map.get(node.parentKey);\n      let nodes = parentNode ? parentNode.children : items;\n      let index = nodes.indexOf(node);\n      this.insert(parentNode?.key, index, ...values);\n    },\n    insertAfter(key: Key, ...values: T[]): void {\n      let node = map.get(key);\n      if (!node) {\n        return;\n      }\n\n      let parentNode = map.get(node.parentKey);\n      let nodes = parentNode ? parentNode.children : items;\n      let index = nodes.indexOf(node);\n      this.insert(parentNode?.key, index + 1, ...values);\n    },\n    prepend(parentKey: Key | null, ...values: T[]) {\n      this.insert(parentKey, 0, ...values);\n    },\n    append(parentKey: Key | null, ...values: T[]) {\n      if (parentKey == null) {\n        this.insert(null, items.length, ...values);\n      } else {\n        let parentNode = map.get(parentKey);\n        if (!parentNode) {\n          return;\n        }\n\n        this.insert(parentKey, parentNode.children.length, ...values);\n      }\n    },\n    remove(...keys: Key[]) {\n      let newItems = items;\n      for (let key of keys) {\n        newItems = updateTree(newItems, key, () => null);\n      }\n\n      setItems(newItems);\n\n      let selection = new Set(selectedKeys);\n      for (let key of selectedKeys) {\n        if (!map.has(key)) {\n          selection.delete(key);\n        }\n      }\n\n      setSelectedKeys(selection);\n    },\n    removeSelectedItems() {\n      this.remove(...selectedKeys);\n    },\n    move(key: Key, toParentKey: Key, index: number) {\n      setItems(items => {\n        let node = map.get(key);\n        if (!node) {\n          return items;\n        }\n\n        items = updateTree(items, key, () => null);\n\n        const movedNode = {\n          ...node,\n          parentKey: toParentKey\n        };\n\n        return updateTree(items, toParentKey, parentNode => ({\n          key: parentNode.key,\n          parentKey: parentNode.parentKey,\n          value: parentNode.value,\n          children: [\n            ...parentNode.children.slice(0, index),\n            movedNode,\n            ...parentNode.children.slice(index)\n          ]\n        }));\n      });\n    },\n    update(oldKey: Key, newValue: T) {\n      setItems(items => updateTree(items, oldKey, oldNode => {\n        let node: TreeNode<T> = {\n          key: oldNode.key,\n          parentKey: oldNode.parentKey,\n          value: newValue,\n          children: null\n        };\n\n        node.children = buildTree(getChildren(newValue), node.key);\n        return node;\n      }));\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}