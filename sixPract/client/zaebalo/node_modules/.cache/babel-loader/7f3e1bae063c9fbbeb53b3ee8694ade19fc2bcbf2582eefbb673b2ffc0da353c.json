{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */let $488c6ddbf4ef74c2$var$formatterCache = new Map();\nlet $488c6ddbf4ef74c2$var$supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat(\"de-DE\", {\n    signDisplay: \"exceptZero\"\n  }).resolvedOptions().signDisplay === \"exceptZero\";\n  // eslint-disable-next-line no-empty\n} catch (e) {}\nlet $488c6ddbf4ef74c2$var$supportsUnit = false;\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat(\"de-DE\", {\n    style: \"unit\",\n    unit: \"degree\"\n  }).resolvedOptions().style === \"unit\";\n  // eslint-disable-next-line no-empty\n} catch (e1) {}\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nconst $488c6ddbf4ef74c2$var$UNITS = {\n  degree: {\n    narrow: {\n      default: \"\\xb0\",\n      \"ja-JP\": \" 度\",\n      \"zh-TW\": \"度\",\n      \"sl-SI\": \" \\xb0\"\n    }\n  }\n};\nclass $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 {\n  /** Formats a number value as a string, according to the locale and options provided to the constructor. */format(value) {\n    let res = \"\";\n    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);else res = this.numberFormatter.format(value);\n    if (this.options.style === \"unit\" && !$488c6ddbf4ef74c2$var$supportsUnit) {\n      var _UNITS_unit;\n      let {\n        unit: unit,\n        unitDisplay = \"short\",\n        locale: locale\n      } = this.resolvedOptions();\n      let values = (_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];\n      res += values[locale] || values.default;\n    }\n    return res;\n  }\n  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n  formatToParts(value) {\n    // TODO: implement signDisplay for formatToParts\n    // @ts-ignore\n    return this.numberFormatter.formatToParts(value);\n  }\n  /** Formats a number range as a string. */\n  formatRange(start, end) {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRange === \"function\")\n      // @ts-ignore\n      return this.numberFormatter.formatRange(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\");\n    // Very basic fallback for old browsers.\n    return `${this.format(start)} – ${this.format(end)}`;\n  }\n  /** Formats a number range as an array of parts. */\n  formatRangeToParts(start, end) {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRangeToParts === \"function\")\n      // @ts-ignore\n      return this.numberFormatter.formatRangeToParts(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\");\n    let startParts = this.numberFormatter.formatToParts(start);\n    let endParts = this.numberFormatter.formatToParts(end);\n    return [...startParts.map(p => ({\n      ...p,\n      source: \"startRange\"\n    })), {\n      type: \"literal\",\n      value: \" – \",\n      source: \"shared\"\n    }, ...endParts.map(p => ({\n      ...p,\n      source: \"endRange\"\n    }))];\n  }\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions() {\n    let options = this.numberFormatter.resolvedOptions();\n    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = {\n      ...options,\n      signDisplay: this.options.signDisplay\n    };\n    if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === \"unit\") options = {\n      ...options,\n      style: \"unit\",\n      unit: this.options.unit,\n      unitDisplay: this.options.unitDisplay\n    };\n    return options;\n  }\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n}\nfunction $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let {\n    numberingSystem: numberingSystem\n  } = options;\n  if (numberingSystem && locale.indexOf(\"-u-nu-\") === -1) locale = `${locale}-u-nu-${numberingSystem}`;\n  if (options.style === \"unit\" && !$488c6ddbf4ef74c2$var$supportsUnit) {\n    var _UNITS_unit;\n    let {\n      unit: unit,\n      unitDisplay = \"short\"\n    } = options;\n    if (!unit) throw new Error('unit option must be provided with style: \"unit\"');\n    if (!((_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay])) throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n    options = {\n      ...options,\n      style: \"decimal\"\n    };\n  }\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : \"\");\n  if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\nfunction $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {\n  if (signDisplay === \"auto\") return numberFormat.format(num);else if (signDisplay === \"never\") return numberFormat.format(Math.abs(num));else {\n    let needsPositiveSign = false;\n    if (signDisplay === \"always\") needsPositiveSign = num > 0 || Object.is(num, 0);else if (signDisplay === \"exceptZero\") {\n      if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);else needsPositiveSign = num > 0;\n    }\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      let minus = negative.replace(noSign, \"\").replace(/\\u200e|\\u061C/, \"\");\n      if ([...minus].length !== 1) console.warn(\"@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case\");\n      let positive = negative.replace(noSign, \"!!!\").replace(minus, \"+\").replace(\"!!!\", noSign);\n      return positive;\n    } else return numberFormat.format(num);\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nconst $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp(\"^.*\\\\(.*\\\\).*$\");\nconst $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [\"latn\", \"arab\", \"hanidec\"];\nclass $6c7bd7858deea686$export$cd11ab140839f11d {\n  /**\n  * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n  */\n  parse(value) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n  /**\n  * Returns whether the given string could potentially be a valid number. This should be used to\n  * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n  * of the minus/plus sign characters can be checked.\n  */\n  isValidPartialNumber(value, minValue, maxValue) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n  /**\n  * Returns a numbering system for which the given string is valid in the current locale.\n  * If no numbering system could be detected, the default numbering system for the current\n  * locale is returned.\n  */\n  getNumberingSystem(value) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.locale = locale;\n    this.options = options;\n  }\n}\nconst $6c7bd7858deea686$var$numberParserCache = new Map();\nfunction $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options);\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes(\"-nu-\") && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS) if (numberingSystem !== defaultParser.options.numberingSystem) {\n      let parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes(\"-u-\") ? \"-nu-\" : \"-u-nu-\") + numberingSystem, options);\n      if (parser.isValidPartialNumber(value)) return parser;\n    }\n  }\n  return defaultParser;\n}\nfunction $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : \"\");\n  let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);\n    $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);\n  }\n  return parser;\n}\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass $6c7bd7858deea686$var$NumberParserImpl {\n  parse(value) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value);\n    // Remove group characters, and replace decimal points and numerals with ASCII values.\n    fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, \"\").replace(this.symbols.decimal, \".\").replace(this.symbols.minusSign, \"-\").replace(this.symbols.numeral, this.symbols.index);\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) return NaN;\n    // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n    if (this.options.currencySign === \"accounting\" && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue;\n    // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n    if (this.options.style === \"percent\") {\n      newValue /= 100;\n      var _this_options_maximumFractionDigits;\n      // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n      newValue = +newValue.toFixed(((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) + 2);\n    }\n    return newValue;\n  }\n  sanitize(value) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, \"\");\n    // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n    value = value.replace(\"-\", this.symbols.minusSign);\n    // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n    if (this.options.numberingSystem === \"arab\") {\n      value = value.replace(\",\", this.symbols.decimal);\n      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      value = $6c7bd7858deea686$var$replaceAll(value, \".\", this.symbols.group);\n    }\n    // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n    if (this.options.locale === \"fr-FR\") value = $6c7bd7858deea686$var$replaceAll(value, \".\", String.fromCharCode(8239));\n    return value;\n  }\n  isValidPartialNumber(value) {\n    let minValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -Infinity;\n    let maxValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n    value = this.sanitize(value);\n    // Remove minus or plus sign, which must be at the start of the string.\n    if (value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length);\n    // Numbers cannot start with a group separator\n    if (value.startsWith(this.symbols.group)) return false;\n    // Remove numerals, groups, and decimals\n    value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, \"\").replace(this.symbols.numeral, \"\").replace(this.symbols.decimal, \"\");\n    // The number is valid if there are no remaining characters\n    return value.length === 0;\n  }\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = $6c7bd7858deea686$var$getSymbols(this.formatter, this.options, options);\n  }\n}\nconst $6c7bd7858deea686$var$nonLiteralParts = new Set([\"decimal\", \"fraction\", \"integer\", \"minusSign\", \"plusSign\", \"group\"]);\nfunction $6c7bd7858deea686$var$getSymbols(formatter, intlOptions, originalOptions) {\n  var _allParts_find, _posAllParts_find, _allParts_find1, _allParts_find2;\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  let allParts = formatter.formatToParts(-10000.111);\n  let posAllParts = formatter.formatToParts(10000.111);\n  let singularParts = formatter.formatToParts(1);\n  var _allParts_find_value;\n  let minusSign = (_allParts_find_value = (_allParts_find = allParts.find(p => p.type === \"minusSign\")) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : \"-\";\n  let plusSign = (_posAllParts_find = posAllParts.find(p => p.type === \"plusSign\")) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value;\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n  if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"exceptZero\" || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"always\")) plusSign = \"+\";\n  let decimal = (_allParts_find1 = allParts.find(p => p.type === \"decimal\")) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;\n  let group = (_allParts_find2 = allParts.find(p => p.type === \"group\")) === null || _allParts_find2 === void 0 ? void 0 : _allParts_find2.value;\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  let pluralLiterals = allParts.filter(p => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map(p => $6c7bd7858deea686$var$escapeRegex(p.value));\n  let singularLiterals = singularParts.filter(p => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map(p => $6c7bd7858deea686$var$escapeRegex(p.value));\n  let sortedLiterals = [...new Set([...singularLiterals, ...pluralLiterals])].sort((a, b) => b.length - a.length);\n  let literals = sortedLiterals.length === 0 ? new RegExp(\"[\\\\p{White_Space}]\", \"gu\") : new RegExp(`${sortedLiterals.join(\"|\")}|[\\\\p{White_Space}]`, \"gu\");\n  // These are for replacing non-latn characters with the latn equivalent\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {\n    useGrouping: false\n  }).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join(\"\")}]`, \"g\");\n  let index = d => String(indexes.get(d));\n  return {\n    minusSign: minusSign,\n    plusSign: plusSign,\n    decimal: decimal,\n    group: group,\n    literals: literals,\n    numeral: numeral,\n    index: index\n  };\n}\nfunction $6c7bd7858deea686$var$replaceAll(str, find, replace) {\n  // @ts-ignore\n  if (str.replaceAll)\n    // @ts-ignore\n    return str.replaceAll(find, replace);\n  return str.split(find).join(replace);\n}\nfunction $6c7bd7858deea686$var$escapeRegex(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\nexport { $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 as NumberFormatter, $6c7bd7858deea686$export$cd11ab140839f11d as NumberParser };","map":{"version":3,"names":["$488c6ddbf4ef74c2$var$formatterCache","Map","$488c6ddbf4ef74c2$var$supportsSignDisplay","Intl","NumberFormat","signDisplay","resolvedOptions","e","$488c6ddbf4ef74c2$var$supportsUnit","style","unit","e1","$488c6ddbf4ef74c2$var$UNITS","degree","narrow","default","$488c6ddbf4ef74c2$export$cc77c4ff7e8673c5","format","value","res","options","$488c6ddbf4ef74c2$export$711b50b3c525e0f2","numberFormatter","_UNITS_unit","unitDisplay","locale","values","formatToParts","formatRange","start","end","RangeError","formatRangeToParts","startParts","endParts","map","p","source","type","constructor","arguments","length","undefined","$488c6ddbf4ef74c2$var$getCachedNumberFormatter","numberingSystem","indexOf","Error","cacheKey","Object","entries","sort","a","b","join","has","get","set","numberFormat","num","Math","abs","needsPositiveSign","is","negative","noSign","minus","replace","console","warn","positive","$6c7bd7858deea686$var$CURRENCY_SIGN_REGEX","RegExp","$6c7bd7858deea686$var$NUMBERING_SYSTEMS","$6c7bd7858deea686$export$cd11ab140839f11d","parse","$6c7bd7858deea686$var$getNumberParserImpl","isValidPartialNumber","minValue","maxValue","getNumberingSystem","$6c7bd7858deea686$var$numberParserCache","defaultParser","$6c7bd7858deea686$var$getCachedNumberParser","includes","parser","$6c7bd7858deea686$var$NumberParserImpl","fullySanitizedValue","sanitize","$6c7bd7858deea686$var$replaceAll","symbols","group","decimal","minusSign","numeral","index","newValue","NaN","isNaN","currencySign","test","_this_options_maximumFractionDigits","toFixed","maximumFractionDigits","literals","String","fromCharCode","Infinity","startsWith","slice","plusSign","formatter","$6c7bd7858deea686$var$getSymbols","$6c7bd7858deea686$var$nonLiteralParts","Set","intlOptions","originalOptions","_allParts_find","_posAllParts_find","_allParts_find1","_allParts_find2","allParts","posAllParts","singularParts","_allParts_find_value","find","pluralLiterals","filter","$6c7bd7858deea686$var$escapeRegex","singularLiterals","sortedLiterals","numerals","useGrouping","reverse","indexes","d","i","str","replaceAll","split","string"],"sources":["C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@internationalized\\number\\dist\\packages\\@internationalized\\number\\src\\index.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@internationalized\\number\\dist\\packages\\@internationalized\\number\\src\\NumberFormatter.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@internationalized\\number\\dist\\packages\\@internationalized\\number\\src\\NumberParser.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {NumberFormatOptions} from './NumberFormatter';\n\nexport {NumberFormatter} from './NumberFormatter';\nexport {NumberParser} from './NumberParser';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.NumberFormat>();\n\nlet supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  supportsSignDisplay = (new Intl.NumberFormat('de-DE', {signDisplay: 'exceptZero'})).resolvedOptions().signDisplay === 'exceptZero';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nlet supportsUnit = false;\ntry {\n  // @ts-ignore\n  supportsUnit = (new Intl.NumberFormat('de-DE', {style: 'unit', unit: 'degree'})).resolvedOptions().style === 'unit';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nconst UNITS = {\n  degree: {\n    narrow: {\n      default: '°',\n      'ja-JP': ' 度',\n      'zh-TW': '度',\n      'sl-SI': ' °'\n      // Arabic?? But Safari already doesn't use Arabic digits so might be ok...\n      // https://bugs.webkit.org/show_bug.cgi?id=218139\n    }\n  }\n};\n\nexport interface NumberFormatOptions extends Intl.NumberFormatOptions {\n  /** Overrides default numbering system for the current locale. */\n  numberingSystem?: string\n}\n\ninterface NumberRangeFormatPart extends Intl.NumberFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/**\n * A wrapper around Intl.NumberFormat providing additional options, polyfills, and caching for performance.\n */\nexport class NumberFormatter implements Intl.NumberFormat {\n  private numberFormatter: Intl.NumberFormat;\n  private options: NumberFormatOptions;\n\n  constructor(locale: string, options: NumberFormatOptions = {}) {\n    this.numberFormatter = getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a number value as a string, according to the locale and options provided to the constructor. */\n  format(value: number): string {\n    let res = '';\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      res = numberFormatSignDisplayPolyfill(this.numberFormatter, this.options.signDisplay, value);\n    } else {\n      res = this.numberFormatter.format(value);\n    }\n\n    if (this.options.style === 'unit' && !supportsUnit) {\n      let {unit, unitDisplay = 'short', locale} = this.resolvedOptions();\n      let values = UNITS[unit]?.[unitDisplay];\n      res += values[locale] || values.default;\n    }\n\n    return res;\n  }\n\n  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n  formatToParts(value: number): Intl.NumberFormatPart[] {\n    // TODO: implement signDisplay for formatToParts\n    // @ts-ignore\n    return this.numberFormatter.formatToParts(value);\n  }\n\n  /** Formats a number range as a string. */\n  formatRange(start: number, end: number): string {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.format(start)} – ${this.format(end)}`;\n  }\n\n  /** Formats a number range as an array of parts. */\n  formatRangeToParts(start: number, end: number): NumberRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.numberFormatter.formatToParts(start);\n    let endParts = this.numberFormatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as NumberRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as NumberRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): Intl.ResolvedNumberFormatOptions {\n    let options = this.numberFormatter.resolvedOptions();\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      options = {...options, signDisplay: this.options.signDisplay};\n    }\n\n    if (!supportsUnit && this.options.style === 'unit') {\n      options = {...options, style: 'unit', unit: this.options.unit, unitDisplay: this.options.unitDisplay};\n    }\n\n    return options;\n  }\n}\n\nfunction getCachedNumberFormatter(locale: string, options: NumberFormatOptions = {}): Intl.NumberFormat {\n  let {numberingSystem} = options;\n  if (numberingSystem && locale.indexOf('-u-nu-') === -1) {\n    locale = `${locale}-u-nu-${numberingSystem}`;\n  }\n\n  if (options.style === 'unit' && !supportsUnit) {\n    let {unit, unitDisplay = 'short'} = options;\n    if (!unit) {\n      throw new Error('unit option must be provided with style: \"unit\"');\n    }\n    if (!UNITS[unit]?.[unitDisplay]) {\n      throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n    }\n    options = {...options, style: 'decimal'};\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\n/** @private - exported for tests */\nexport function numberFormatSignDisplayPolyfill(numberFormat: Intl.NumberFormat, signDisplay: string, num: number) {\n  if (signDisplay === 'auto') {\n    return numberFormat.format(num);\n  } else if (signDisplay === 'never') {\n    return numberFormat.format(Math.abs(num));\n  } else {\n    let needsPositiveSign = false;\n    if (signDisplay === 'always') {\n      needsPositiveSign = num > 0 || Object.is(num, 0);\n    } else if (signDisplay === 'exceptZero') {\n      if (Object.is(num, -0) || Object.is(num, 0)) {\n        num = Math.abs(num);\n      } else {\n        needsPositiveSign = num > 0;\n      }\n    }\n\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      let minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n      if ([...minus].length !== 1) {\n        console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n      }\n      let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n      return positive;\n    } else {\n      return numberFormat.format(num);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\ninterface Symbols {\n  minusSign: string,\n  plusSign: string,\n  decimal: string,\n  group: string,\n  literals: RegExp,\n  numeral: RegExp,\n  index: (v: string) => string\n}\n\nconst CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nconst NUMBERING_SYSTEMS = ['latn', 'arab', 'hanidec'];\n\n/**\n * A NumberParser can be used to perform locale-aware parsing of numbers from Unicode strings,\n * as well as validation of partial user input. It automatically detects the numbering system\n * used in the input, and supports parsing decimals, percentages, currency values, and units\n * according to the locale.\n */\nexport class NumberParser {\n  private locale: string;\n  private options: Intl.NumberFormatOptions;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.locale = locale;\n    this.options = options;\n  }\n\n  /**\n   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n   */\n  parse(value: string): number {\n    return getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n\n  /**\n   * Returns whether the given string could potentially be a valid number. This should be used to\n   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n   * of the minus/plus sign characters can be checked.\n   */\n  isValidPartialNumber(value: string, minValue?: number, maxValue?: number): boolean {\n    return getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n\n  /**\n   * Returns a numbering system for which the given string is valid in the current locale.\n   * If no numbering system could be detected, the default numbering system for the current\n   * locale is returned.\n   */\n  getNumberingSystem(value: string): string {\n    return getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n}\n\nconst numberParserCache = new Map<string, NumberParserImpl>();\nfunction getNumberParserImpl(locale: string, options: Intl.NumberFormatOptions, value: string) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = getCachedNumberParser(locale, options);\n\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of NUMBERING_SYSTEMS) {\n      if (numberingSystem !== defaultParser.options.numberingSystem) {\n        let parser = getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);\n        if (parser.isValidPartialNumber(value)) {\n          return parser;\n        }\n      }\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction getCachedNumberParser(locale: string, options: Intl.NumberFormatOptions) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  let parser = numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new NumberParserImpl(locale, options);\n    numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n}\n\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass NumberParserImpl {\n  formatter: Intl.NumberFormat;\n  options: Intl.ResolvedNumberFormatOptions;\n  symbols: Symbols;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = getSymbols(this.formatter, this.options, options);\n  }\n\n  parse(value: string) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value);\n\n    // Remove group characters, and replace decimal points and numerals with ASCII values.\n    fullySanitizedValue = replaceAll(fullySanitizedValue, this.symbols.group, '')\n      .replace(this.symbols.decimal, '.')\n      .replace(this.symbols.minusSign, '-')\n      .replace(this.symbols.numeral, this.symbols.index);\n\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) {\n      return NaN;\n    }\n\n    // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n    if (this.options.currencySign === 'accounting' && CURRENCY_SIGN_REGEX.test(value)) {\n      newValue = -1 * newValue;\n    }\n\n    // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n    if (this.options.style === 'percent') {\n      newValue /= 100;\n      // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n      newValue = +newValue.toFixed((this.options.maximumFractionDigits ?? 0) + 2);\n    }\n\n    return newValue;\n  }\n\n  sanitize(value: string) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, '');\n\n    // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n    value = value.replace('-', this.symbols.minusSign);\n\n    // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n    if (this.options.numberingSystem === 'arab') {\n      value = value.replace(',', this.symbols.decimal);\n      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      value = replaceAll(value, '.', this.symbols.group);\n    }\n\n    // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n    if (this.options.locale === 'fr-FR') {\n      value = replaceAll(value, '.', String.fromCharCode(8239));\n    }\n\n    return value;\n  }\n\n  isValidPartialNumber(value: string, minValue: number = -Infinity, maxValue: number = Infinity): boolean {\n    value = this.sanitize(value);\n\n    // Remove minus or plus sign, which must be at the start of the string.\n    if (value.startsWith(this.symbols.minusSign) && minValue < 0) {\n      value = value.slice(this.symbols.minusSign.length);\n    } else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) {\n      value = value.slice(this.symbols.plusSign.length);\n    }\n\n    // Numbers cannot start with a group separator\n    if (value.startsWith(this.symbols.group)) {\n      return false;\n    }\n\n    // Remove numerals, groups, and decimals\n    value = replaceAll(value, this.symbols.group, '')\n      .replace(this.symbols.numeral, '')\n      .replace(this.symbols.decimal, '');\n\n    // The number is valid if there are no remaining characters\n    return value.length === 0;\n  }\n}\n\nconst nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);\n\nfunction getSymbols(formatter: Intl.NumberFormat, intlOptions: Intl.ResolvedNumberFormatOptions, originalOptions: Intl.NumberFormatOptions): Symbols {\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  let allParts = formatter.formatToParts(-10000.111);\n  let posAllParts = formatter.formatToParts(10000.111);\n  let singularParts = formatter.formatToParts(1);\n\n  let minusSign = allParts.find(p => p.type === 'minusSign')?.value ?? '-';\n  let plusSign = posAllParts.find(p => p.type === 'plusSign')?.value;\n\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n  if (!plusSign && (originalOptions?.signDisplay === 'exceptZero' || originalOptions?.signDisplay === 'always')) {\n    plusSign = '+';\n  }\n\n  let decimal = allParts.find(p => p.type === 'decimal')?.value;\n  let group = allParts.find(p => p.type === 'group')?.value;\n\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  let pluralLiterals = allParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let singularLiterals = singularParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let sortedLiterals = [...new Set([...singularLiterals, ...pluralLiterals])].sort((a, b) => b.length - a.length);\n  let literals = sortedLiterals.length === 0 ? \n      new RegExp('[\\\\p{White_Space}]', 'gu') :\n      new RegExp(`${sortedLiterals.join('|')}|[\\\\p{White_Space}]`, 'gu');\n\n  // These are for replacing non-latn characters with the latn equivalent\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {useGrouping: false}).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n  let index = d => String(indexes.get(d));\n\n  return {minusSign, plusSign, decimal, group, literals, numeral, index};\n}\n\nfunction replaceAll(str: string, find: string, replace: string) {\n  // @ts-ignore\n  if (str.replaceAll) {\n    // @ts-ignore\n    return str.replaceAll(find, replace);\n  }\n\n  return str.split(find).join(replace);\n}\n\nfunction escapeRegex(string: string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}