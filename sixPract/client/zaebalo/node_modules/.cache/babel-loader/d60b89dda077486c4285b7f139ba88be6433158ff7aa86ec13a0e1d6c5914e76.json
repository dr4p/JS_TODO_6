{"ast":null,"code":"import { mergeProps as $bx7SL$mergeProps, useSyncRef as $bx7SL$useSyncRef, useGlobalListeners as $bx7SL$useGlobalListeners, isVirtualClick as $bx7SL$isVirtualClick, focusWithoutScrolling as $bx7SL$focusWithoutScrolling, isVirtualPointerEvent as $bx7SL$isVirtualPointerEvent, isIOS as $bx7SL$isIOS, runAfterTransition as $bx7SL$runAfterTransition, useLayoutEffect as $bx7SL$useLayoutEffect, isMac as $bx7SL$isMac, useEvent as $bx7SL$useEvent, useDescription as $bx7SL$useDescription } from \"@react-aria/utils\";\nimport $bx7SL$react, { useRef as $bx7SL$useRef, useContext as $bx7SL$useContext, useState as $bx7SL$useState, useMemo as $bx7SL$useMemo, useEffect as $bx7SL$useEffect, useCallback as $bx7SL$useCallback } from \"react\";\nimport { useIsSSR as $bx7SL$useIsSSR } from \"@react-aria/ssr\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet $14c0b72509d70225$var$state = \"default\";\nlet $14c0b72509d70225$var$savedUserSelect = \"\";\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n  if ((0, $bx7SL$isIOS)()) {\n    if ($14c0b72509d70225$var$state === \"default\") {\n      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = \"none\";\n    }\n    $14c0b72509d70225$var$state = \"disabled\";\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = \"none\";\n  }\n}\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n  if ((0, $bx7SL$isIOS)()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if ($14c0b72509d70225$var$state !== \"disabled\") return;\n    $14c0b72509d70225$var$state = \"restoring\";\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      (0, $bx7SL$runAfterTransition)(() => {\n        // Avoid race conditions\n        if ($14c0b72509d70225$var$state === \"restoring\") {\n          if (document.documentElement.style.webkitUserSelect === \"none\") document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || \"\";\n          $14c0b72509d70225$var$savedUserSelect = \"\";\n          $14c0b72509d70225$var$state = \"default\";\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement)\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    {\n      if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n        let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n        if (target.style.userSelect === \"none\") target.style.userSelect = targetOldUserSelect;\n        if (target.getAttribute(\"style\") === \"\") target.removeAttribute(\"style\");\n        $14c0b72509d70225$var$modifiedElementMap.delete(target);\n      }\n    }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nconst $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, $bx7SL$react).createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = \"PressResponderContext\";\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  let context = (0, $bx7SL$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n  if (context) {\n    let {\n      register: register,\n      ...contextProps\n    } = context;\n    props = (0, $bx7SL$mergeProps)(contextProps, props);\n    register();\n  }\n  (0, $bx7SL$useSyncRef)(context, props.ref);\n  return props;\n}\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  let {\n    onPress: onPress,\n    onPressChange: onPressChange,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressUp: onPressUp,\n    isDisabled: isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress: preventFocusOnPress,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit,\n    allowTextSelectionOnPress: allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _,\n    ...domProps\n  } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n  let propsRef = (0, $bx7SL$useRef)(null);\n  propsRef.current = {\n    onPress: onPress,\n    onPressChange: onPressChange,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressUp: onPressUp,\n    isDisabled: isDisabled,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit\n  };\n  let [isPressed, setPressed] = (0, $bx7SL$useState)(false);\n  let ref = (0, $bx7SL$useRef)({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = (0, $bx7SL$useGlobalListeners)();\n  let pressProps = (0, $bx7SL$useMemo)(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent, pointerType) => {\n      let {\n        onPressStart: onPressStart,\n        onPressChange: onPressChange,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled || state.didFirePressStart) return;\n      if (onPressStart) onPressStart({\n        type: \"pressstart\",\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(true);\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n    let triggerPressEnd = function (originalEvent, pointerType) {\n      let wasPressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      let {\n        onPressEnd: onPressEnd,\n        onPressChange: onPressChange,\n        onPress: onPress,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (!state.didFirePressStart) return;\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n      if (onPressEnd) onPressEnd({\n        type: \"pressend\",\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(false);\n      setPressed(false);\n      if (onPress && wasPressed && !isDisabled) onPress({\n        type: \"press\",\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let triggerPressUp = (originalEvent, pointerType) => {\n      let {\n        onPressUp: onPressUp,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled) return;\n      if (onPressUp) onPressUp({\n        type: \"pressup\",\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let cancel = e => {\n      if (state.isPressed) {\n        if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n      }\n    };\n    let pressProps = {\n      onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n          e.stopPropagation();\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, \"keyboard\");\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, \"keyup\", onKeyUp, false);\n          }\n        } else if (e.key === \"Enter\" && $f6c31cce2adf654f$var$isHTMLAnchorLink(e.currentTarget))\n          // If the target is a link, we won't have handled this above because we want the default\n          // browser behavior to open the link when pressing Enter. But we still need to prevent\n          // default so that elements above do not also handle it (e.g. table row).\n          e.stopPropagation();\n      },\n      onKeyUp(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\");\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) e.preventDefault();\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === \"virtual\" || (0, $bx7SL$isVirtualClick)(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n            triggerPressStart(e, \"virtual\");\n            triggerPressUp(e, \"virtual\");\n            triggerPressEnd(e, \"virtual\");\n          }\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n    let onKeyUp = e => {\n      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n        e.stopPropagation();\n        state.isPressed = false;\n        let target = e.target;\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\", state.target.contains(target));\n        removeAllGlobalListeners();\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target instanceof HTMLElement && state.target.contains(target) && ($f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute(\"role\") === \"link\")) state.target.click();\n      }\n    };\n    if (typeof PointerEvent !== \"undefined\") {\n      pressProps.onPointerDown = e => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if ((0, $bx7SL$isVirtualPointerEvent)(e.nativeEvent)) {\n          state.pointerType = \"virtual\";\n          return;\n        }\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n          triggerPressStart(e, state.pointerType);\n          addGlobalListener(document, \"pointermove\", onPointerMove, false);\n          addGlobalListener(document, \"pointerup\", onPointerUp, false);\n          addGlobalListener(document, \"pointercancel\", onPointerCancel, false);\n        }\n      };\n      pressProps.onMouseDown = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n      pressProps.onPointerUp = e => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target) || state.pointerType === \"virtual\") return;\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      };\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = e => {\n        if (e.pointerId !== state.activePointerId) return;\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        }\n      };\n      let onPointerCancel = e => {\n        cancel(e);\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = e => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) return;\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = (0, $bx7SL$isVirtualClick)(e.nativeEvent) ? \"virtual\" : \"mouse\";\n        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(document, \"mouseup\", onMouseUp, false);\n      };\n      pressProps.onMouseEnter = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n      pressProps.onMouseLeave = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n      pressProps.onMouseUp = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);\n      };\n      let onMouseUp = e => {\n        // Only handle left clicks\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n      pressProps.onTouchStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = \"touch\";\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(window, \"scroll\", onScroll, true);\n      };\n      pressProps.onTouchMove = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n      pressProps.onTouchEnd = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        removeAllGlobalListeners();\n      };\n      pressProps.onTouchCancel = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel(e);\n      };\n      let onScroll = e => {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  (0, $bx7SL$useEffect)(() => {\n    return () => {\n      if (!allowTextSelectionOnPress)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(ref.current.target);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: (0, $bx7SL$mergeProps)(domProps, pressProps)\n  };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === \"A\" && target.hasAttribute(\"href\");\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n  const {\n    key: key,\n    code: code\n  } = event;\n  const element = currentTarget;\n  const role = element.getAttribute(\"role\");\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (key === \"Enter\" || key === \" \" || key === \"Spacebar\" || code === \"Space\") && !(element instanceof HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && (\n  // A link with a valid href should be handled natively,\n  // unless it also has role='button' and was triggered using Space.\n  !$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === \"button\" && key !== \"Enter\") &&\n  // An element with role='link' should only trigger with Enter key\n  !(role === \"link\" && key !== \"Enter\");\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  const {\n    targetTouches: targetTouches\n  } = event;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n  return null;\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  let offsetX = point.width / 2 || point.radiusX || 0;\n  let offsetY = point.height / 2 || point.radiusY || 0;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) return false;\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.draggable;\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n  if (target instanceof HTMLButtonElement) return target.type !== \"submit\";\n  return true;\n}\nconst $f6c31cce2adf654f$var$nonTextInputTypes = new Set([\"checkbox\", \"radio\", \"range\", \"color\", \"file\", \"image\", \"button\", \"submit\", \"reset\"]);\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === \"checkbox\" || target.type === \"radio\" ? key === \" \" : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/(0, $bx7SL$react).forwardRef((_ref, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref;\n  let newRef = (0, $bx7SL$useRef)();\n  ref = ref !== null && ref !== void 0 ? ref : newRef;\n  let {\n    pressProps: pressProps\n  } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({\n    ...props,\n    ref: ref\n  });\n  let child = (0, $bx7SL$react).Children.only(children);\n  return /*#__PURE__*/(0, $bx7SL$react).cloneElement(child,\n  // @ts-ignore\n  {\n    ref: ref,\n    ...(0, $bx7SL$mergeProps)(child.props, pressProps)\n  });\n});\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/(0, $bx7SL$react).forwardRef((_ref2, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref2;\n  let isRegistered = (0, $bx7SL$useRef)(false);\n  let prevContext = (0, $bx7SL$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n  let context = (0, $bx7SL$mergeProps)(prevContext || {}, {\n    ...props,\n    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n    register() {\n      isRegistered.current = true;\n      if (prevContext) prevContext.register();\n    }\n  });\n  (0, $bx7SL$useSyncRef)(prevContext, ref);\n  (0, $bx7SL$useEffect)(() => {\n    if (!isRegistered.current) console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n  }, []);\n  return /*#__PURE__*/(0, $bx7SL$react).createElement((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {\n    value: context\n  }, children);\n});\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nclass $8a9cb279dc87e130$export$905e7fc544a71f36 {\n  isDefaultPrevented() {\n    return this.nativeEvent.defaultPrevented;\n  }\n  preventDefault() {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n  stopPropagation() {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n  isPropagationStopped() {\n    return false;\n  }\n  persist() {}\n  constructor(type, nativeEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target;\n    this.currentTarget = nativeEvent.currentTarget;\n    this.relatedTarget = nativeEvent.relatedTarget;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n}\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n  let stateRef = (0, $bx7SL$useRef)({\n    isFocused: false,\n    onBlur: onBlur,\n    observer: null\n  });\n  stateRef.current.onBlur = onBlur;\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  (0, $bx7SL$useLayoutEffect)(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n  // This function is called during a React onFocus event.\n  return (0, $bx7SL$useCallback)(e => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {\n      stateRef.current.isFocused = true;\n      let target = e.target;\n      let onBlurHandler = e => {\n        var\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          _stateRef_current, _stateRef_current_onBlur;\n        stateRef.current.isFocused = false;\n        if (target.disabled) (_stateRef_current_onBlur = (_stateRef_current = stateRef.current).onBlur) === null || _stateRef_current_onBlur === void 0 ? void 0 : _stateRef_current_onBlur.call(_stateRef_current, new $8a9cb279dc87e130$export$905e7fc544a71f36(\"blur\", e));\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n      target.addEventListener(\"focusout\", onBlurHandler, {\n        once: true\n      });\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent(\"blur\"));\n          target.dispatchEvent(new FocusEvent(\"focusout\", {\n            bubbles: true\n          }));\n        }\n      });\n      stateRef.current.observer.observe(target, {\n        attributes: true,\n        attributeFilter: [\"disabled\"]\n      });\n    }\n  }, []);\n}\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n  let {\n    isDisabled: isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange: onFocusChange\n  } = props;\n  const onBlur = (0, $bx7SL$useCallback)(e => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) onBlurProp(e);\n      if (onFocusChange) onFocusChange(false);\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n  const onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);\n  const onFocus = (0, $bx7SL$useCallback)(e => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    if (e.target === e.currentTarget && document.activeElement === e.target) {\n      if (onFocusProp) onFocusProp(e);\n      if (onFocusChange) onFocusChange(true);\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n  return {\n    focusProps: {\n      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : undefined\n    }\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = new Set();\nlet $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n// Only Tab or Esc keys will make focus visible on text input elements\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction $507fabe10e71c6fb$var$isValidKey(e) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || !(0, $bx7SL$isMac)() && e.altKey || e.ctrlKey || e.key === \"Control\" || e.key === \"Shift\" || e.key === \"Meta\");\n}\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n  if ($507fabe10e71c6fb$var$isValidKey(e)) {\n    $507fabe10e71c6fb$var$currentModality = \"keyboard\";\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"keyboard\", e);\n  }\n}\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n  $507fabe10e71c6fb$var$currentModality = \"pointer\";\n  if (e.type === \"mousedown\" || e.type === \"pointerdown\") {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"pointer\", e);\n  }\n}\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n  if ((0, $bx7SL$isVirtualClick)(e)) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$currentModality = \"virtual\";\n  }\n}\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) return;\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n    $507fabe10e71c6fb$var$currentModality = \"virtual\";\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"virtual\", e);\n  }\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return;\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n  document.addEventListener(\"keydown\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener(\"keyup\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener(\"click\", $507fabe10e71c6fb$var$handleClickEvent, true);\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener(\"focus\", $507fabe10e71c6fb$var$handleFocusEvent, true);\n  window.addEventListener(\"blur\", $507fabe10e71c6fb$var$handleWindowBlur, false);\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"pointermove\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"pointerup\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"mousemove\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"mouseup\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n  }\n  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\nif (typeof document !== \"undefined\") {\n  if (document.readyState !== \"loading\") $507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener(\"DOMContentLoaded\", $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n  return $507fabe10e71c6fb$var$currentModality !== \"pointer\";\n}\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n  return $507fabe10e71c6fb$var$currentModality;\n}\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n  $507fabe10e71c6fb$var$currentModality = modality;\n  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  let [modality, setModality] = (0, $bx7SL$useState)($507fabe10e71c6fb$var$currentModality);\n  (0, $bx7SL$useEffect)(() => {\n    let handler = () => {\n      setModality($507fabe10e71c6fb$var$currentModality);\n    };\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, []);\n  return (0, $bx7SL$useIsSSR)() ? null : modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n  return !(isTextInput && modality === \"keyboard\" && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    isTextInput: isTextInput,\n    autoFocus: autoFocus\n  } = props;\n  let [isFocusVisibleState, setFocusVisible] = (0, $bx7SL$useState)(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());\n  $507fabe10e71c6fb$export$ec71b4b83ac08ec3(isFocusVisible => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {\n    isTextInput: isTextInput\n  });\n  return {\n    isFocusVisible: isFocusVisibleState\n  };\n}\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  (0, $bx7SL$useEffect)(() => {\n    let handler = (modality, e) => {\n      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n    };\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n  let {\n    isDisabled: isDisabled,\n    onBlurWithin: onBlurWithin,\n    onFocusWithin: onFocusWithin,\n    onFocusWithinChange: onFocusWithinChange\n  } = props;\n  let state = (0, $bx7SL$useRef)({\n    isFocusWithin: false\n  });\n  let onBlur = (0, $bx7SL$useCallback)(e => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n      state.current.isFocusWithin = false;\n      if (onBlurWithin) onBlurWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(false);\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n  let onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);\n  let onFocus = (0, $bx7SL$useCallback)(e => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    if (!state.current.isFocusWithin && document.activeElement === e.target) {\n      if (onFocusWithin) onFocusWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(true);\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n  if (isDisabled) return {\n    focusWithinProps: {\n      onFocus: null,\n      onBlur: null\n    }\n  };\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === \"touch\") $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n  if (typeof document === \"undefined\") return;\n  if (typeof PointerEvent !== \"undefined\") document.addEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  $6179b936705e76d3$var$hoverCount++;\n  return () => {\n    $6179b936705e76d3$var$hoverCount--;\n    if ($6179b936705e76d3$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== \"undefined\") document.removeEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  };\n}\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n  let {\n    onHoverStart: onHoverStart,\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd,\n    isDisabled: isDisabled\n  } = props;\n  let [isHovered, setHovered] = (0, $bx7SL$useState)(false);\n  let state = (0, $bx7SL$useRef)({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: \"\",\n    target: null\n  }).current;\n  (0, $bx7SL$useEffect)($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n  let {\n    hoverProps: hoverProps,\n    triggerHoverEnd: triggerHoverEnd\n  } = (0, $bx7SL$useMemo)(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === \"touch\" || state.isHovered || !event.currentTarget.contains(event.target)) return;\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n      if (onHoverStart) onHoverStart({\n        type: \"hoverstart\",\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(true);\n      setHovered(true);\n    };\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = \"\";\n      state.target = null;\n      if (pointerType === \"touch\" || !state.isHovered) return;\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) onHoverEnd({\n        type: \"hoverend\",\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(false);\n      setHovered(false);\n    };\n    let hoverProps = {};\n    if (typeof PointerEvent !== \"undefined\") {\n      hoverProps.onPointerEnter = e => {\n        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === \"mouse\") return;\n        triggerHoverStart(e, e.pointerType);\n      };\n      hoverProps.onPointerLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n      hoverProps.onMouseEnter = e => {\n        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, \"mouse\");\n        state.ignoreEmulatedMouseEvents = false;\n      };\n      hoverProps.onMouseLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, \"mouse\");\n      };\n    }\n    return {\n      hoverProps: hoverProps,\n      triggerHoverEnd: triggerHoverEnd\n    };\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n  (0, $bx7SL$useEffect)(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) triggerHoverEnd({\n      currentTarget: state.target\n    }, state.pointerType);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled]);\n  return {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n  let {\n    ref: ref,\n    onInteractOutside: onInteractOutside,\n    isDisabled: isDisabled,\n    onInteractOutsideStart: onInteractOutsideStart\n  } = props;\n  let stateRef = (0, $bx7SL$useRef)({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside: onInteractOutside,\n    onInteractOutsideStart: onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n  (0, $bx7SL$useEffect)(() => {\n    if (isDisabled) return;\n    let onPointerDown = e => {\n      if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);\n        state.isPointerDown = true;\n      }\n    };\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== \"undefined\") {\n      let onPointerUp = e => {\n        if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) state.onInteractOutside(e);\n        state.isPointerDown = false;\n      };\n      // changing these to capture phase fixed combobox\n      document.addEventListener(\"pointerdown\", onPointerDown, true);\n      document.addEventListener(\"pointerup\", onPointerUp, true);\n      return () => {\n        document.removeEventListener(\"pointerdown\", onPointerDown, true);\n        document.removeEventListener(\"pointerup\", onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = e => {\n        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) state.onInteractOutside(e);\n        state.isPointerDown = false;\n      };\n      let onTouchEnd = e => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) state.onInteractOutside(e);\n        state.isPointerDown = false;\n      };\n      document.addEventListener(\"mousedown\", onPointerDown, true);\n      document.addEventListener(\"mouseup\", onMouseUp, true);\n      document.addEventListener(\"touchstart\", onPointerDown, true);\n      document.addEventListener(\"touchend\", onTouchEnd, true);\n      return () => {\n        document.removeEventListener(\"mousedown\", onPointerDown, true);\n        document.removeEventListener(\"mouseup\", onMouseUp, true);\n        document.removeEventListener(\"touchstart\", onPointerDown, true);\n        document.removeEventListener(\"touchend\", onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n  if (event.button > 0) return false;\n  if (event.target) {\n    // if the event target is no longer in the document, ignore\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n    // If the target is within a top layer element (e.g. toasts), ignore.\n    if (event.target.closest(\"[data-react-aria-top-layer]\")) return false;\n  }\n  return ref.current && !ref.current.contains(event.target);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nfunction $93925083ecbb358c$export$48d1ea6320830260(handler) {\n  if (!handler) return;\n  let shouldStopPropagation = true;\n  return e => {\n    let event = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error(\"stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.\");\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n    handler(event);\n    if (shouldStopPropagation) e.stopPropagation();\n  };\n}\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),\n      onKeyUp: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)\n    }\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n  let {\n    onMoveStart: onMoveStart,\n    onMove: onMove,\n    onMoveEnd: onMoveEnd\n  } = props;\n  let state = (0, $bx7SL$useRef)({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = (0, $bx7SL$useGlobalListeners)();\n  let moveProps = (0, $bx7SL$useMemo)(() => {\n    let moveProps = {};\n    let start = () => {\n      (0, $14c0b72509d70225$export$16a4697467175487)();\n      state.current.didMove = false;\n    };\n    let move = (originalEvent, pointerType, deltaX, deltaY) => {\n      if (deltaX === 0 && deltaY === 0) return;\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n          type: \"movestart\",\n          pointerType: pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: \"move\",\n        pointerType: pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let end = (originalEvent, pointerType) => {\n      (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)();\n      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n        type: \"moveend\",\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    if (typeof PointerEvent === \"undefined\") {\n      let onMouseMove = e => {\n        if (e.button === 0) {\n          move(e, \"mouse\", e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      let onMouseUp = e => {\n        if (e.button === 0) {\n          end(e, \"mouse\");\n          removeGlobalListener(window, \"mousemove\", onMouseMove, false);\n          removeGlobalListener(window, \"mouseup\", onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = e => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, \"mousemove\", onMouseMove, false);\n          addGlobalListener(window, \"mouseup\", onMouseUp, false);\n        }\n      };\n      let onTouchMove = e => {\n        let touch = [...e.changedTouches].findIndex(_ref3 => {\n          let {\n            identifier: identifier\n          } = _ref3;\n          return identifier === state.current.id;\n        });\n        if (touch >= 0) {\n          let {\n            pageX: pageX,\n            pageY: pageY\n          } = e.changedTouches[touch];\n          move(e, \"touch\", pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n      let onTouchEnd = e => {\n        let touch = [...e.changedTouches].findIndex(_ref4 => {\n          let {\n            identifier: identifier\n          } = _ref4;\n          return identifier === state.current.id;\n        });\n        if (touch >= 0) {\n          end(e, \"touch\");\n          state.current.id = null;\n          removeGlobalListener(window, \"touchmove\", onTouchMove);\n          removeGlobalListener(window, \"touchend\", onTouchEnd);\n          removeGlobalListener(window, \"touchcancel\", onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = e => {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        let {\n          pageX: pageX,\n          pageY: pageY,\n          identifier: identifier\n        } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, \"touchmove\", onTouchMove, false);\n        addGlobalListener(window, \"touchend\", onTouchEnd, false);\n        addGlobalListener(window, \"touchcancel\", onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || \"mouse\";\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || \"mouse\";\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, \"pointermove\", onPointerMove, false);\n          removeGlobalListener(window, \"pointerup\", onPointerUp, false);\n          removeGlobalListener(window, \"pointercancel\", onPointerUp, false);\n        }\n      };\n      moveProps.onPointerDown = e => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, \"pointermove\", onPointerMove, false);\n          addGlobalListener(window, \"pointerup\", onPointerUp, false);\n          addGlobalListener(window, \"pointercancel\", onPointerUp, false);\n        }\n      };\n    }\n    let triggerKeyboardMove = (e, deltaX, deltaY) => {\n      start();\n      move(e, \"keyboard\", deltaX, deltaY);\n      end(e, \"keyboard\");\n    };\n    moveProps.onKeyDown = e => {\n      switch (e.key) {\n        case \"Left\":\n        case \"ArrowLeft\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case \"Right\":\n        case \"ArrowRight\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case \"Up\":\n        case \"ArrowUp\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case \"Down\":\n        case \"ArrowDown\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n  return {\n    moveProps: moveProps\n  };\n}\n\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n  let {\n    onScroll: onScroll,\n    isDisabled: isDisabled\n  } = props;\n  let onScrollHandler = (0, $bx7SL$useCallback)(e => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) return;\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n    if (onScroll) onScroll({\n      deltaX: e.deltaX,\n      deltaY: e.deltaY\n    });\n  }, [onScroll]);\n  (0, $bx7SL$useEvent)(ref, \"wheel\", isDisabled ? null : onScrollHandler);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n  let {\n    isDisabled: isDisabled,\n    onLongPressStart: onLongPressStart,\n    onLongPressEnd: onLongPressEnd,\n    onLongPress: onLongPress,\n    threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD,\n    accessibilityDescription: accessibilityDescription\n  } = props;\n  const timeRef = (0, $bx7SL$useRef)(null);\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = (0, $bx7SL$useGlobalListeners)();\n  let {\n    pressProps: pressProps\n  } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({\n    isDisabled: isDisabled,\n    onPressStart(e) {\n      if (e.pointerType === \"mouse\" || e.pointerType === \"touch\") {\n        if (onLongPressStart) onLongPressStart({\n          ...e,\n          type: \"longpressstart\"\n        });\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent(\"pointercancel\", {\n            bubbles: true\n          }));\n          if (onLongPress) onLongPress({\n            ...e,\n            type: \"longpress\"\n          });\n          timeRef.current = null;\n        }, threshold);\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === \"touch\") {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n          addGlobalListener(e.target, \"contextmenu\", onContextMenu, {\n            once: true\n          });\n          addGlobalListener(window, \"pointerup\", () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, \"contextmenu\", onContextMenu);\n            }, 30);\n          }, {\n            once: true\n          });\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) clearTimeout(timeRef.current);\n      if (onLongPressEnd && (e.pointerType === \"mouse\" || e.pointerType === \"touch\")) onLongPressEnd({\n        ...e,\n        type: \"longpressend\"\n      });\n    }\n  });\n  let descriptionProps = (0, $bx7SL$useDescription)(onLongPress && !isDisabled ? accessibilityDescription : null);\n  return {\n    longPressProps: (0, $bx7SL$mergeProps)(pressProps, descriptionProps)\n  };\n}\nexport { $3b117e43dc0ca95d$export$27c701ed9e449e99 as Pressable, $f1ab8c75478c6f73$export$3351871ee4b288b8 as PressResponder, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6 as useFocus, $507fabe10e71c6fb$export$b9b3dfddab17db27 as isFocusVisible, $507fabe10e71c6fb$export$630ff653c5ada6a9 as getInteractionModality, $507fabe10e71c6fb$export$8397ddfc504fdb9a as setInteractionModality, $507fabe10e71c6fb$export$98e20ec92f614cfe as useInteractionModality, $507fabe10e71c6fb$export$ffd9e5021c1fb2d6 as useFocusVisible, $507fabe10e71c6fb$export$ec71b4b83ac08ec3 as useFocusVisibleListener, $9ab94262bd0047c7$export$420e68273165f4ec as useFocusWithin, $6179b936705e76d3$export$ae780daf29e6d456 as useHover, $e0b6e0b68ec7f50f$export$872b660ac5a1ff98 as useInteractOutside, $46d819fcbaf35654$export$8f71654801c2f7cd as useKeyboard, $e8a7022cf87cba2a$export$36da96379f79f245 as useMove, $f6c31cce2adf654f$export$45712eceda6fad21 as usePress, $7d0a636d7a4dcefd$export$2123ff2b87c81ca as useScrollWheel, $8a26561d2877236e$export$c24ed0104d07eab9 as useLongPress };","map":{"version":3,"names":["$14c0b72509d70225$var$state","$14c0b72509d70225$var$savedUserSelect","$14c0b72509d70225$var$modifiedElementMap","WeakMap","$14c0b72509d70225$export$16a4697467175487","target","$bx7SL$isIOS","document","documentElement","style","webkitUserSelect","HTMLElement","SVGElement","set","userSelect","$14c0b72509d70225$export$b0d6fa1ab32e3295","setTimeout","$bx7SL$runAfterTransition","has","targetOldUserSelect","get","getAttribute","removeAttribute","delete","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","$bx7SL$react","createContext","displayName","$f6c31cce2adf654f$var$usePressResponderContext","props","context","$bx7SL$useContext","register","contextProps","$bx7SL$mergeProps","$bx7SL$useSyncRef","ref","$f6c31cce2adf654f$export$45712eceda6fad21","onPress","onPressChange","onPressStart","onPressEnd","onPressUp","isDisabled","isPressed","isPressedProp","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","propsRef","$bx7SL$useRef","current","setPressed","$bx7SL$useState","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","activePointerId","isOverTarget","pointerType","addGlobalListener","removeAllGlobalListeners","$bx7SL$useGlobalListeners","pressProps","$bx7SL$useMemo","state","triggerPressStart","originalEvent","type","currentTarget","shiftKey","metaKey","ctrlKey","altKey","triggerPressEnd","wasPressed","arguments","length","undefined","triggerPressUp","cancel","e","$f6c31cce2adf654f$var$createEvent","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","nativeEvent","contains","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","key","preventDefault","stopPropagation","repeat","onKeyUp","$f6c31cce2adf654f$var$isHTMLAnchorLink","onClick","button","$bx7SL$isVirtualClick","$bx7SL$focusWithoutScrolling","click","PointerEvent","onPointerDown","$bx7SL$isVirtualPointerEvent","$f6c31cce2adf654f$var$shouldPreventDefault","pointerId","onPointerMove","onPointerUp","onPointerCancel","onMouseDown","$f6c31cce2adf654f$var$isOverTarget","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","window","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchEnd","onTouchCancel","$bx7SL$useEffect","tagName","hasAttribute","event","code","element","role","HTMLInputElement","$f6c31cce2adf654f$var$isValidInputKey","HTMLTextAreaElement","isContentEditable","targetTouches","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","width","radiusX","offsetY","height","radiusY","top","clientY","right","clientX","bottom","left","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","rect","getBoundingClientRect","pointRect","draggable","HTMLButtonElement","$f6c31cce2adf654f$var$nonTextInputTypes","Set","$3b117e43dc0ca95d$export$27c701ed9e449e99","forwardRef","_ref","children","newRef","child","Children","only","cloneElement","$f1ab8c75478c6f73$export$3351871ee4b288b8","_ref2","isRegistered","prevContext","console","warn","createElement","Provider","value","$8a9cb279dc87e130$export$905e7fc544a71f36","isDefaultPrevented","defaultPrevented","isPropagationStopped","persist","constructor","relatedTarget","bubbles","cancelable","eventPhase","isTrusted","timeStamp","$8a9cb279dc87e130$export$715c682d09d639cc","onBlur","stateRef","isFocused","observer","$bx7SL$useLayoutEffect","disconnect","$bx7SL$useCallback","HTMLSelectElement","onBlurHandler","_stateRef_current","_stateRef_current_onBlur","disabled","call","addEventListener","once","MutationObserver","dispatchEvent","FocusEvent","observe","attributes","attributeFilter","$a1ea59d68270f0dd$export$f8168d8dd8fd66e6","onFocus","onFocusProp","onBlurProp","onFocusChange","onSyntheticFocus","activeElement","focusProps","$507fabe10e71c6fb$var$currentModality","$507fabe10e71c6fb$var$changeHandlers","$507fabe10e71c6fb$var$hasSetupGlobalListeners","$507fabe10e71c6fb$var$hasEventBeforeFocus","$507fabe10e71c6fb$var$hasBlurredWindowRecently","$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS","Tab","Escape","$507fabe10e71c6fb$var$triggerChangeHandlers","modality","handler","$507fabe10e71c6fb$var$isValidKey","$bx7SL$isMac","$507fabe10e71c6fb$var$handleKeyboardEvent","$507fabe10e71c6fb$var$handlePointerEvent","$507fabe10e71c6fb$var$handleClickEvent","$507fabe10e71c6fb$var$handleFocusEvent","$507fabe10e71c6fb$var$handleWindowBlur","$507fabe10e71c6fb$var$setupGlobalFocusEvents","focus","prototype","apply","readyState","$507fabe10e71c6fb$export$b9b3dfddab17db27","$507fabe10e71c6fb$export$630ff653c5ada6a9","$507fabe10e71c6fb$export$8397ddfc504fdb9a","$507fabe10e71c6fb$export$98e20ec92f614cfe","setModality","add","$bx7SL$useIsSSR","$507fabe10e71c6fb$var$isKeyboardFocusEvent","isTextInput","KeyboardEvent","$507fabe10e71c6fb$export$ffd9e5021c1fb2d6","autoFocus","isFocusVisibleState","setFocusVisible","$507fabe10e71c6fb$export$ec71b4b83ac08ec3","isFocusVisible","fn","deps","opts","$9ab94262bd0047c7$export$420e68273165f4ec","onBlurWithin","onFocusWithin","onFocusWithinChange","isFocusWithin","focusWithinProps","$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$hoverCount","$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$handleGlobalPointerEvent","$6179b936705e76d3$var$setupGlobalTouchEvents","removeEventListener","$6179b936705e76d3$export$ae780daf29e6d456","onHoverStart","onHoverChange","onHoverEnd","isHovered","setHovered","hoverProps","triggerHoverEnd","triggerHoverStart","onPointerEnter","onPointerLeave","$e0b6e0b68ec7f50f$export$872b660ac5a1ff98","onInteractOutside","onInteractOutsideStart","isPointerDown","$e0b6e0b68ec7f50f$var$isValidEvent","ownerDocument","closest","$93925083ecbb358c$export$48d1ea6320830260","shouldStopPropagation","error","continuePropagation","$46d819fcbaf35654$export$8f71654801c2f7cd","keyboardProps","$e8a7022cf87cba2a$export$36da96379f79f245","onMoveStart","onMove","onMoveEnd","didMove","lastPosition","id","removeGlobalListener","moveProps","start","move","deltaX","deltaY","end","onMouseMove","pageX","pageY","findIndex","_ref3","_ref4","triggerKeyboardMove","$7d0a636d7a4dcefd$export$2123ff2b87c81ca","onScrollHandler","$bx7SL$useEvent","$8a26561d2877236e$var$DEFAULT_THRESHOLD","$8a26561d2877236e$export$c24ed0104d07eab9","onLongPressStart","onLongPressEnd","onLongPress","threshold","accessibilityDescription","timeRef","onContextMenu","clearTimeout","descriptionProps","$bx7SL$useDescription","longPressProps"],"sources":["C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\index.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\Pressable.tsx","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\usePress.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\textSelection.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\context.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\PressResponder.tsx","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useFocus.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\utils.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useFocusVisible.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useFocusWithin.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useHover.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useInteractOutside.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useKeyboard.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\createEventHandler.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useMove.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useScrollWheel.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\button\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useLongPress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {Pressable} from './Pressable';\nexport {PressResponder} from './PressResponder';\nexport {useFocus} from './useFocus';\nexport {\n  isFocusVisible,\n  getInteractionModality,\n  setInteractionModality,\n  useInteractionModality,\n  useFocusVisible,\n  useFocusVisibleListener\n} from './useFocusVisible';\nexport {useFocusWithin} from './useFocusWithin';\nexport {useHover} from './useHover';\nexport {useInteractOutside} from './useInteractOutside';\nexport {useKeyboard} from './useKeyboard';\nexport {useMove} from './useMove';\nexport {usePress} from './usePress';\nexport {useScrollWheel} from './useScrollWheel';\nexport {useLongPress} from './useLongPress';\n\nexport type {FocusProps, FocusResult} from './useFocus';\nexport type {FocusVisibleHandler, FocusVisibleProps, FocusVisibleResult, Modality} from './useFocusVisible';\nexport type {FocusWithinProps, FocusWithinResult} from './useFocusWithin';\nexport type {HoverProps, HoverResult} from './useHover';\nexport type {InteractOutsideProps} from './useInteractOutside';\nexport type {KeyboardProps, KeyboardResult} from './useKeyboard';\nexport type {PressProps, PressHookProps, PressResult} from './usePress';\nexport type {MoveEvents} from '@react-types/shared';\nexport type {MoveResult} from './useMove';\nexport type {LongPressProps, LongPressResult} from './useLongPress';\nexport type {ScrollWheelProps} from './useScrollWheel';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps, usePress} from './usePress';\nimport React, {ReactElement, RefObject, useRef} from 'react';\n\ninterface PressableProps extends PressProps {\n  children: ReactElement<DOMAttributes, string>\n}\n\nexport const Pressable = React.forwardRef(({children, ...props}: PressableProps, ref: RefObject<Element>) => {\n  let newRef = useRef();\n  ref = ref ?? newRef;\n  let {pressProps} = usePress({...props, ref});\n  let child = React.Children.only(children);\n  return React.cloneElement(\n    child,\n    // @ts-ignore\n    {ref, ...mergeProps(child.props, pressProps)}\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {DOMAttributes, FocusableElement, PointerType, PressEvents} from '@react-types/shared';\nimport {focusWithoutScrolling, isVirtualClick, isVirtualPointerEvent, mergeProps, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {PressResponderContext} from './context';\nimport {RefObject, useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<Element>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  activePointerId: any,\n  target: FocusableElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType,\n  userSelect?: string\n}\n\ninterface EventBase {\n  currentTarget: EventTarget,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: DOMAttributes\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n  let propsRef = useRef<PressHookProps>(null);\n  propsRef.current = {onPress, onPressChange, onPressStart, onPressEnd, onPressUp, isDisabled, shouldCancelOnPointerExit};\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressStart, onPressChange, isDisabled} = propsRef.current;\n      if (isDisabled || state.didFirePressStart) {\n        return;\n      }\n\n      if (onPressStart) {\n        onPressStart({\n          type: 'pressstart',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(true);\n      }\n\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = (originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n      let {onPressEnd, onPressChange, onPress, isDisabled} = propsRef.current;\n      if (!state.didFirePressStart) {\n        return;\n      }\n\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n\n      if (onPressEnd) {\n        onPressEnd({\n          type: 'pressend',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(false);\n      }\n\n      setPressed(false);\n\n      if (onPress && wasPressed && !isDisabled) {\n        onPress({\n          type: 'press',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let triggerPressUp = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressUp, isDisabled} = propsRef.current;\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressUp) {\n        onPressUp({\n          type: 'pressup',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let cancel = (e: EventBase) => {\n      if (state.isPressed) {\n        if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n      }\n    };\n\n    let pressProps: DOMAttributes = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target as Element)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n            e.preventDefault();\n          }\n          e.stopPropagation();\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        } else if (e.key === 'Enter' && isHTMLAnchorLink(e.currentTarget)) {\n          // If the target is a link, we won't have handled this above because we want the default\n          // browser behavior to open the link when pressing Enter. But we still need to prevent\n          // default so that elements above do not also handle it (e.g. table row).\n          e.stopPropagation();\n        }\n      },\n      onKeyUp(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target as Element)) {\n          triggerPressUp(createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && isValidKeyboardEvent(e, state.target)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n\n        state.isPressed = false;\n        let target = e.target as Element;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target instanceof HTMLElement && state.target.contains(target) && (isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) {\n          state.target.click();\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as Element)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefault(e.currentTarget as Element)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as Element) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if (isOverTarget(e, state.target)) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget)) {\n          e.preventDefault();\n        }\n\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) {\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType);\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(e, state.pointerType, false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(e);\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as Element).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        restoreTextSelection(ref.current.target);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: Element): boolean {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent, currentTarget: Element): boolean {\n  const {key, code} = event;\n  const element = currentTarget as HTMLElement;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    !((element instanceof HTMLInputElement && !isValidInputKey(element, key)) ||\n      element instanceof HTMLTextAreaElement ||\n      element.isContentEditable) &&\n    // A link with a valid href should be handled natively,\n    // unless it also has role='button' and was triggered using Space.\n    (!isHTMLAnchorLink(element) || (role === 'button' && key !== 'Enter')) &&\n    // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: FocusableElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = (point.width / 2) || point.radiusX || 0;\n  let offsetY = (point.height / 2) || point.radiusY || 0;\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: Element) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefault(target: Element) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.draggable;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element, key: string) {\n  if (target instanceof HTMLInputElement) {\n    return !isValidInputKey(target, key);\n  }\n\n  if (target instanceof HTMLButtonElement) {\n    return target.type !== 'submit';\n  }\n\n  return true;\n}\n\nconst nonTextInputTypes = new Set([\n  'checkbox',\n  'radio',\n  'range',\n  'color',\n  'file',\n  'image',\n  'button',\n  'submit',\n  'reset'\n]);\n\nfunction isValidInputKey(target: HTMLInputElement, key: string) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio'\n    ? key === ' '\n    : nonTextInputTypes.has(target.type);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isIOS, runAfterTransition} from '@react-aria/utils';\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\n\n// For non-iOS devices, we apply user-select: none to the pressed element instead to avoid possible\n// performance issues that arise from applying and removing user-select: none to the entire page\n// (see https://github.com/adobe/react-spectrum/issues/1609).\ntype State = 'default' | 'disabled' | 'restoring';\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet state: State = 'default';\nlet savedUserSelect = '';\nlet modifiedElementMap = new WeakMap<Element, string>();\n\nexport function disableTextSelection(target?: Element) {\n  if (isIOS()) {\n    if (state === 'default') {\n      savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    state = 'disabled';\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nexport function restoreTextSelection(target?: Element) {\n  if (isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if (state !== 'disabled') {\n      return;\n    }\n\n    state = 'restoring';\n\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      runAfterTransition(() => {\n        // Avoid race conditions\n        if (state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = savedUserSelect || '';\n          }\n\n          savedUserSelect = '';\n          state = 'default';\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && modifiedElementMap.has(target)) {\n      let targetOldUserSelect = modifiedElementMap.get(target);\n\n      if (target.style.userSelect === 'none') {\n        target.style.userSelect = targetOldUserSelect;\n      }\n\n      if (target.getAttribute('style') === '') {\n        target.removeAttribute('style');\n      }\n      modifiedElementMap.delete(target);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {PressProps} from './usePress';\nimport React, {MutableRefObject} from 'react';\n\ninterface IPressResponderContext extends PressProps {\n  register(): void,\n  ref?: MutableRefObject<FocusableElement>\n}\n\nexport const PressResponderContext = React.createContext<IPressResponderContext>(null);\nPressResponderContext.displayName = 'PressResponderContext';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport {PressProps} from './usePress';\nimport {PressResponderContext} from './context';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\n\ninterface PressResponderProps extends PressProps {\n  children: ReactNode\n}\n\nexport const PressResponder = React.forwardRef(({children, ...props}: PressResponderProps, ref: RefObject<FocusableElement>) => {\n  let isRegistered = useRef(false);\n  let prevContext = useContext(PressResponderContext);\n  let context = mergeProps(prevContext || {}, {\n    ...props,\n    ref: ref || prevContext?.ref,\n    register() {\n      isRegistered.current = true;\n      if (prevContext) {\n        prevContext.register();\n      }\n    }\n  });\n\n  useSyncRef(prevContext, ref);\n\n  useEffect(() => {\n    if (!isRegistered.current) {\n      console.warn(\n        'A PressResponder was rendered without a pressable child. ' +\n        'Either call the usePress hook, or wrap your DOM node with <Pressable> component.'\n      );\n    }\n  }, []);\n\n  return (\n    <PressResponderContext.Provider value={context}>\n      {children}\n    </PressResponderContext.Provider>\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes, FocusableElement, FocusEvents} from '@react-types/shared';\nimport {FocusEvent, useCallback} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusProps<Target = FocusableElement> extends FocusEvents<Target> {\n  /** Whether the focus events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusResult<Target = FocusableElement> {\n  /** Props to spread onto the target element. */\n  focusProps: DOMAttributes<Target>\n}\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\nexport function useFocus<Target extends FocusableElement = FocusableElement>(props: FocusProps<Target>): FocusResult<Target> {\n  let {\n    isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange\n  } = props;\n\n  const onBlur: FocusProps<Target>['onBlur'] = useCallback((e: FocusEvent<Target>) => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) {\n        onBlurProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(false);\n      }\n\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n\n\n  const onSyntheticFocus = useSyntheticBlurEvent<Target>(onBlur);\n\n  const onFocus: FocusProps<Target>['onFocus'] = useCallback((e: FocusEvent<Target>) => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    if (e.target === e.currentTarget && document.activeElement === e.target) {\n      if (onFocusProp) {\n        onFocusProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(true);\n      }\n\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n\n  return {\n    focusProps: {\n      onFocus: (!isDisabled && (onFocusProp || onFocusChange || onBlurProp)) ? onFocus : undefined,\n      onBlur: (!isDisabled && (onBlurProp || onFocusChange)) ? onBlur : undefined\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent as ReactFocusEvent, useCallback, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\nexport class SyntheticFocusEvent<Target = Element> implements ReactFocusEvent<Target> {\n  nativeEvent: FocusEvent;\n  target: EventTarget & Target;\n  currentTarget: EventTarget & Target;\n  relatedTarget: Element;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  timeStamp: number;\n  type: string;\n\n  constructor(type: string, nativeEvent: FocusEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target as EventTarget & Target;\n    this.currentTarget = nativeEvent.currentTarget as EventTarget & Target;\n    this.relatedTarget = nativeEvent.relatedTarget as Element;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  isDefaultPrevented(): boolean {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault(): void {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation(): void {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped(): boolean {\n    return false;\n  }\n\n  persist() {}\n}\n\nexport function useSyntheticBlurEvent<Target = Element>(onBlur: (e: ReactFocusEvent<Target>) => void) {\n  let stateRef = useRef({\n    isFocused: false,\n    onBlur,\n    observer: null as MutationObserver\n  });\n  stateRef.current.onBlur = onBlur;\n\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n\n  // This function is called during a React onFocus event.\n  return useCallback((e: ReactFocusEvent<Target>) => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (\n      e.target instanceof HTMLButtonElement ||\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement ||\n      e.target instanceof HTMLSelectElement\n    ) {\n      stateRef.current.isFocused = true;\n\n      let target = e.target;\n      let onBlurHandler = (e: FocusEvent) => {\n        stateRef.current.isFocused = false;\n\n        if (target.disabled) {\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          stateRef.current.onBlur?.(new SyntheticFocusEvent('blur', e));\n        }\n\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {once: true});\n\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {bubbles: true}));\n        }\n      });\n\n      stateRef.current.observer.observe(target, {attributes: true, attributeFilter: ['disabled']});\n    }\n  }, []);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {isMac, isVirtualClick} from '@react-aria/utils';\nimport {useEffect, useState} from 'react';\nimport {useIsSSR} from '@react-aria/ssr';\n\nexport type Modality = 'keyboard' | 'pointer' | 'virtual';\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent;\ntype Handler = (modality: Modality, e: HandlerEvent) => void;\nexport type FocusVisibleHandler = (isFocusVisible: boolean) => void;\nexport interface FocusVisibleProps {\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusVisibleResult {\n  /** Whether keyboard focus is visible globally. */\n  isFocusVisible: boolean\n}\n\nlet currentModality = null;\nlet changeHandlers = new Set<Handler>();\nlet hasSetupGlobalListeners = false;\nlet hasEventBeforeFocus = false;\nlet hasBlurredWindowRecently = false;\n\n// Only Tab or Esc keys will make focus visible on text input elements\nconst FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction triggerChangeHandlers(modality: Modality, e: HandlerEvent) {\n  for (let handler of changeHandlers) {\n    handler(modality, e);\n  }\n}\n\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction isValidKey(e: KeyboardEvent) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || (!isMac() && e.altKey) || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\n\nfunction handleKeyboardEvent(e: KeyboardEvent) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(e)) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction handlePointerEvent(e: PointerEvent | MouseEvent) {\n  currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    hasEventBeforeFocus = true;\n    triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction handleClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    currentModality = 'virtual';\n  }\n}\n\nfunction handleFocusEvent(e: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    currentModality = 'virtual';\n    triggerChangeHandlers('virtual', e);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || hasSetupGlobalListeners) {\n    return;\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', handleKeyboardEvent, true);\n  document.addEventListener('keyup', handleKeyboardEvent, true);\n  document.addEventListener('click', handleClickEvent, true);\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', handleFocusEvent, true);\n  window.addEventListener('blur', handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', handlePointerEvent, true);\n    document.addEventListener('pointermove', handlePointerEvent, true);\n    document.addEventListener('pointerup', handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', handlePointerEvent, true);\n    document.addEventListener('mousemove', handlePointerEvent, true);\n    document.addEventListener('mouseup', handlePointerEvent, true);\n  }\n\n  hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') {\n    setupGlobalFocusEvents();\n  } else {\n    document.addEventListener('DOMContentLoaded', setupGlobalFocusEvents);\n  }\n}\n\n/**\n * If true, keyboard focus is visible.\n */\nexport function isFocusVisible(): boolean {\n  return currentModality !== 'pointer';\n}\n\nexport function getInteractionModality(): Modality {\n  return currentModality;\n}\n\nexport function setInteractionModality(modality: Modality) {\n  currentModality = modality;\n  triggerChangeHandlers(modality, null);\n}\n\n/**\n * Keeps state of the current modality.\n */\nexport function useInteractionModality(): Modality {\n  setupGlobalFocusEvents();\n\n  let [modality, setModality] = useState(currentModality);\n  useEffect(() => {\n    let handler = () => {\n      setModality(currentModality);\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, []);\n\n  return useIsSSR() ? null : modality;\n}\n\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction isKeyboardFocusEvent(isTextInput: boolean, modality: Modality, e: HandlerEvent) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\nexport function useFocusVisible(props: FocusVisibleProps = {}): FocusVisibleResult {\n  let {isTextInput, autoFocus} = props;\n  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());\n  useFocusVisibleListener((isFocusVisible) => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {isTextInput});\n\n  return {isFocusVisible: isFocusVisibleState};\n}\n\n/**\n * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).\n */\nexport function useFocusVisibleListener(fn: FocusVisibleHandler, deps: ReadonlyArray<any>, opts?: {isTextInput?: boolean}): void {\n  setupGlobalFocusEvents();\n\n  useEffect(() => {\n    let handler = (modality: Modality, e: HandlerEvent) => {\n      if (!isKeyboardFocusEvent(opts?.isTextInput, modality, e)) {\n        return;\n      }\n      fn(isFocusVisible());\n    };\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {FocusEvent, useCallback, useRef} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusWithinProps {\n  /** Whether the focus within events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the target element or a descendant receives focus. */\n  onFocusWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the target element and all descendants lose focus. */\n  onBlurWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the the focus within state changes. */\n  onFocusWithinChange?: (isFocusWithin: boolean) => void\n}\n\nexport interface FocusWithinResult {\n  /** Props to spread onto the target element. */\n  focusWithinProps: DOMAttributes\n}\n\n/**\n * Handles focus events for the target and its descendants.\n */\nexport function useFocusWithin(props: FocusWithinProps): FocusWithinResult {\n  let {\n    isDisabled,\n    onBlurWithin,\n    onFocusWithin,\n    onFocusWithinChange\n  } = props;\n  let state = useRef({\n    isFocusWithin: false\n  });\n\n  let onBlur = useCallback((e: FocusEvent) => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !(e.currentTarget as Element).contains(e.relatedTarget as Element)) {\n      state.current.isFocusWithin = false;\n\n      if (onBlurWithin) {\n        onBlurWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(false);\n      }\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n\n  let onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n  let onFocus = useCallback((e: FocusEvent) => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    if (!state.current.isFocusWithin && document.activeElement === e.target) {\n      if (onFocusWithin) {\n        onFocusWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(true);\n      }\n\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n\n  if (isDisabled) {\n    return {\n      focusWithinProps: {\n        onFocus: null,\n        onBlur: null\n      }\n    };\n  }\n\n  return {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {HoverEvents} from '@react-types/shared';\nimport {useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: DOMAttributes,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n\n  let {hoverProps, triggerHoverEnd} = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: DOMAttributes = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, 'mouse');\n        }\n      };\n    }\n    return {hoverProps, triggerHoverEnd};\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n\n  useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) {\n      triggerHoverEnd({currentTarget: state.target}, state.pointerType);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {RefObject, SyntheticEvent, useEffect, useRef} from 'react';\n\nexport interface InteractOutsideProps {\n  ref: RefObject<Element>,\n  onInteractOutside?: (e: SyntheticEvent) => void,\n  onInteractOutsideStart?: (e: SyntheticEvent) => void,\n  /** Whether the interact outside events should be disabled. */\n  isDisabled?: boolean\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useInteractOutside(props: InteractOutsideProps) {\n  let {ref, onInteractOutside, isDisabled, onInteractOutsideStart} = props;\n  let stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside,\n    onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n\n  useEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    let onPointerDown = (e) => {\n      if (isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) {\n          state.onInteractOutsideStart(e);\n        }\n        state.isPointerDown = true;\n      }\n    };\n\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = (e) => {\n        if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.onInteractOutside(e);\n        }\n        state.isPointerDown = false;\n      };\n\n      // changing these to capture phase fixed combobox\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = (e) => {\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n        } else if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.onInteractOutside(e);\n        }\n        state.isPointerDown = false;\n      };\n\n      let onTouchEnd = (e) => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && isValidEvent(e, ref)) {\n          state.onInteractOutside(e);\n        }\n        state.isPointerDown = false;\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction isValidEvent(event, ref) {\n  if (event.button > 0) {\n    return false;\n  }\n\n  if (event.target) {\n    // if the event target is no longer in the document, ignore\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) {\n      return false;\n    }\n\n    // If the target is within a top layer element (e.g. toasts), ignore.\n    if (event.target.closest('[data-react-aria-top-layer]')) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createEventHandler} from './createEventHandler';\nimport {DOMAttributes, KeyboardEvents} from '@react-types/shared';\n\nexport interface KeyboardProps extends KeyboardEvents {\n  /** Whether the keyboard events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface KeyboardResult {\n  /** Props to spread onto the target element. */\n  keyboardProps: DOMAttributes\n}\n\n/**\n * Handles keyboard interactions for a focusable element.\n */\nexport function useKeyboard(props: KeyboardProps): KeyboardResult {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: createEventHandler(props.onKeyDown),\n      onKeyUp: createEventHandler(props.onKeyUp)\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BaseEvent} from '@react-types/shared';\nimport {SyntheticEvent} from 'react';\n\n/**\n * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.\n */\nexport function createEventHandler<T extends SyntheticEvent>(handler: (e: BaseEvent<T>) => void): (e: T) => void {\n  if (!handler) {\n    return;\n  }\n\n  let shouldStopPropagation = true;\n  return (e: T) => {\n    let event: BaseEvent<T> = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n\n    handler(event);\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {DOMAttributes, MoveEvents, PointerType} from '@react-types/shared';\nimport React, {useMemo, useRef} from 'react';\nimport {useGlobalListeners} from '@react-aria/utils';\n\nexport interface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: DOMAttributes\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let moveProps = useMemo(() => {\n    let moveProps: DOMAttributes = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n    let move = (originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart?.({\n          type: 'movestart',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let end = (originalEvent: EventBase, pointerType: PointerType) => {\n      restoreTextSelection();\n      if (state.current.didMove) {\n        onMoveEnd?.({\n          type: 'moveend',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n\n  return {moveProps};\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, useCallback} from 'react';\nimport {ScrollEvents} from '@react-types/shared';\nimport {useEvent} from '@react-aria/utils';\n\nexport interface ScrollWheelProps extends ScrollEvents {\n  /** Whether the scroll listener should be disabled. */\n  isDisabled?: boolean\n}\n\n// scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that\nexport function useScrollWheel(props: ScrollWheelProps, ref: RefObject<HTMLElement>): void {\n  let {onScroll, isDisabled} = props;\n  let onScrollHandler = useCallback((e) => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) {\n      return;\n    }\n\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (onScroll) {\n      onScroll({deltaX: e.deltaX, deltaY: e.deltaY});\n    }\n  }, [onScroll]);\n\n  useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, LongPressEvent} from '@react-types/shared';\nimport {mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';\nimport {usePress} from './usePress';\nimport {useRef} from 'react';\n\nexport interface LongPressProps {\n  /** Whether long press events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when a long press interaction starts. */\n  onLongPressStart?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when a long press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onLongPressEnd?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when the threshold time is met while\n   * the press is over the target.\n   */\n  onLongPress?: (e: LongPressEvent) => void,\n  /**\n   * The amount of time in milliseconds to wait before triggering a long press.\n   * @default 500ms\n   */\n  threshold?: number,\n  /**\n   * A description for assistive techology users indicating that a long press\n   * action is available, e.g. \"Long press to open menu\".\n   */\n  accessibilityDescription?: string\n}\n\nexport interface LongPressResult {\n  /** Props to spread on the target element. */\n  longPressProps: DOMAttributes\n}\n\nconst DEFAULT_THRESHOLD = 500;\n\n/**\n * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,\n * accessibility description, and normalizes behavior across browsers and devices.\n */\nexport function useLongPress(props: LongPressProps): LongPressResult {\n  let {\n    isDisabled,\n    onLongPressStart,\n    onLongPressEnd,\n    onLongPress,\n    threshold = DEFAULT_THRESHOLD,\n    accessibilityDescription\n  } = props;\n\n  const timeRef = useRef(null);\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {pressProps} = usePress({\n    isDisabled,\n    onPressStart(e) {\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) {\n          onLongPressStart({\n            ...e,\n            type: 'longpressstart'\n          });\n        }\n\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {bubbles: true}));\n          if (onLongPress) {\n            onLongPress({\n              ...e,\n              type: 'longpress'\n            });\n          }\n          timeRef.current = null;\n        }, threshold);\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {once: true});\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {once: true});\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) {\n        clearTimeout(timeRef.current);\n      }\n\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {\n        onLongPressEnd({\n          ...e,\n          type: 'longpressend'\n        });\n      }\n    }\n  });\n\n  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n\n  return {\n    longPressProps: mergeProps(pressProps, descriptionProps)\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}