{"ast":null,"code":"import { useRef as $eCAIO$useRef, useEffect as $eCAIO$useEffect, useMemo as $eCAIO$useMemo } from \"react\";\nimport { getFocusableTreeWalker as $eCAIO$getFocusableTreeWalker, focusSafely as $eCAIO$focusSafely } from \"@react-aria/focus\";\nimport { focusWithoutScrolling as $eCAIO$focusWithoutScrolling, useEvent as $eCAIO$useEvent, scrollIntoView as $eCAIO$scrollIntoView, scrollIntoViewport as $eCAIO$scrollIntoViewport, mergeProps as $eCAIO$mergeProps, isAppleDevice as $eCAIO$isAppleDevice, isMac as $eCAIO$isMac } from \"@react-aria/utils\";\nimport { getInteractionModality as $eCAIO$getInteractionModality, usePress as $eCAIO$usePress, useLongPress as $eCAIO$useLongPress } from \"@react-aria/interactions\";\nimport { useLocale as $eCAIO$useLocale, useCollator as $eCAIO$useCollator } from \"@react-aria/i18n\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $feb5ffebff200149$export$d3e3bd3e26688c04(e) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return (0, $eCAIO$isAppleDevice)() ? e.altKey : e.ctrlKey;\n}\nfunction $feb5ffebff200149$export$16792effe837dba3(e) {\n  if ((0, $eCAIO$isMac)()) return e.metaKey;\n  return e.ctrlKey;\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/**\n * Controls how long to wait before clearing the typeahead buffer.\n */\nconst $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second\nfunction $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {\n  let {\n    keyboardDelegate: keyboardDelegate,\n    selectionManager: selectionManager,\n    onTypeSelect: onTypeSelect\n  } = options;\n  let state = (0, $eCAIO$useRef)({\n    search: \"\",\n    timeout: null\n  }).current;\n  let onKeyDown = e => {\n    let character = $fb3050f43d946246$var$getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) return;\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === \" \" && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!(\"continuePropagation\" in e)) e.stopPropagation();\n    }\n    state.search += character;\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n    // If no key found, search from the top.\n    if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) onTypeSelect(key);\n    }\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = \"\";\n    }, $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\nfunction $fb3050f43d946246$var$getStringForKey(key) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;\n  return \"\";\n}\nfunction $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref: ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === \"replace\",\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized: isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref\n  } = options;\n  let {\n    direction: direction\n  } = (0, $eCAIO$useLocale)();\n  let onKeyDown = e => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === \"Tab\") e.preventDefault();\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target)) return;\n    const navigateToKey = (key, childFocus) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n        if (e.shiftKey && manager.selectionMode === \"multiple\") manager.extendSelection(key);else if (selectOnFocus && !(0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.replaceSelection(key);\n      }\n    };\n    switch (e.key) {\n      case \"ArrowDown\":\n        if (delegate.getKeyBelow) {\n          var _delegate_getFirstKey, _delegate_getFirstKey1;\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getFirstKey1 = delegate.getFirstKey) === null || _delegate_getFirstKey1 === void 0 ? void 0 : _delegate_getFirstKey1.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"ArrowUp\":\n        if (delegate.getKeyAbove) {\n          var _delegate_getLastKey, _delegate_getLastKey1;\n          e.preventDefault();\n          let nextKey1 = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate);\n          if (nextKey1 == null && shouldFocusWrap) nextKey1 = (_delegate_getLastKey1 = delegate.getLastKey) === null || _delegate_getLastKey1 === void 0 ? void 0 : _delegate_getLastKey1.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey1);\n        }\n        break;\n      case \"ArrowLeft\":\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey2 = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey2, direction === \"rtl\" ? \"first\" : \"last\");\n        }\n        break;\n      case \"ArrowRight\":\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey3 = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey3, direction === \"rtl\" ? \"last\" : \"first\");\n        }\n        break;\n      case \"Home\":\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));\n          manager.setFocusedKey(firstKey);\n          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === \"multiple\") manager.extendSelection(firstKey);else if (selectOnFocus) manager.replaceSelection(firstKey);\n        }\n        break;\n      case \"End\":\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, (0, $feb5ffebff200149$export$16792effe837dba3)(e));\n          manager.setFocusedKey(lastKey);\n          if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === \"multiple\") manager.extendSelection(lastKey);else if (selectOnFocus) manager.replaceSelection(lastKey);\n        }\n        break;\n      case \"PageDown\":\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey4 = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey4);\n        }\n        break;\n      case \"PageUp\":\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey5 = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey5);\n        }\n        break;\n      case \"a\":\n        if ((0, $feb5ffebff200149$export$16792effe837dba3)(e) && manager.selectionMode === \"multiple\" && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case \"Escape\":\n        e.preventDefault();\n        if (!disallowEmptySelection) manager.clearSelection();\n        break;\n      case \"Tab\":\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) ref.current.focus();else {\n            let walker = (0, $eCAIO$getFocusableTreeWalker)(ref.current, {\n              tabbable: true\n            });\n            let next;\n            let last;\n            do {\n              last = walker.lastChild();\n              if (last) next = last;\n            } while (last);\n            if (next && !next.contains(document.activeElement)) (0, $eCAIO$focusWithoutScrolling)(next);\n          }\n          break;\n        }\n    }\n  };\n  // Store the scroll position so we can restore it later.\n  let scrollPos = (0, $eCAIO$useRef)({\n    top: 0,\n    left: 0\n  });\n  (0, $eCAIO$useEvent)(scrollRef, \"scroll\", isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n  let onFocus = e => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);\n      return;\n    }\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) return;\n    manager.setFocused(true);\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = key => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) manager.replaceSelection(key);\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget;\n      var _manager_lastSelectedKey, _manager_firstSelectedKey;\n      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_manager_lastSelectedKey = manager.lastSelectedKey) !== null && _manager_lastSelectedKey !== void 0 ? _manager_lastSelectedKey : delegate.getLastKey());else navigateToFirstKey((_manager_firstSelectedKey = manager.firstSelectedKey) !== null && _manager_firstSelectedKey !== void 0 ? _manager_firstSelectedKey : delegate.getFirstKey());\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n    }\n    if (!isVirtualized && manager.focusedKey != null) {\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`);\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection, or the collection itself.\n        (0, $eCAIO$focusWithoutScrolling)(element);\n        (0, $eCAIO$scrollIntoView)(scrollRef.current, element);\n      }\n    }\n  };\n  let onBlur = e => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);\n  };\n  const autoFocusRef = (0, $eCAIO$useRef)(autoFocus);\n  (0, $eCAIO$useEffect)(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === \"first\") focusedKey = delegate.getFirstKey();\n      if (autoFocus === \"last\") focusedKey = delegate.getLastKey();\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) focusedKey = selectedKeys.values().next().value;\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) (0, $eCAIO$focusSafely)(ref.current);\n    }\n    autoFocusRef.current = false;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  (0, $eCAIO$useEffect)(() => {\n    let modality = (0, $eCAIO$getInteractionModality)();\n    if (!isVirtualized && manager.isFocused && manager.focusedKey != null && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`);\n      if (element) {\n        (0, $eCAIO$scrollIntoView)(scrollRef.current, element);\n        if (modality === \"keyboard\") (0, $eCAIO$scrollIntoViewport)(element, {\n          containingElement: ref.current\n        });\n      }\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey, manager.isFocused, ref]);\n  let handlers = {\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target)\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n    }\n  };\n  let {\n    typeSelectProps: typeSelectProps\n  } = (0, $fb3050f43d946246$export$e32c88dfddc6e1d8)({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n  if (!disallowTypeAhead) handlers = (0, $eCAIO$mergeProps)(typeSelectProps, handlers);\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex;\n  if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex: tabIndex\n    }\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $880e95eb8b93ba9a$export$ecf600387e221c37(options) {\n  let {\n    selectionManager: manager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    isVirtualized: isVirtualized,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    focus: focus,\n    isDisabled: isDisabled,\n    onAction: onAction,\n    allowsDifferentPressOrigin: allowsDifferentPressOrigin\n  } = options;\n  let onSelect = e => {\n    if (e.pointerType === \"keyboard\" && (0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.toggleSelection(key);else {\n      if (manager.selectionMode === \"none\") return;\n      if (manager.selectionMode === \"single\") {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);else manager.replaceSelection(key);\n      } else if (e && e.shiftKey) manager.extendSelection(key);else if (manager.selectionBehavior === \"toggle\" || e && ((0, $feb5ffebff200149$export$16792effe837dba3)(e) || e.pointerType === \"touch\" || e.pointerType === \"virtual\"))\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);else manager.replaceSelection(key);\n    }\n  };\n  // Focus the associated DOM node when this item becomes the focusedKey\n  (0, $eCAIO$useEffect)(() => {\n    let isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus) {\n      if (focus) focus();else if (document.activeElement !== ref.current) (0, $eCAIO$focusSafely)(ref.current);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n  isDisabled = isDisabled || manager.isDisabled(key);\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps = {};\n  if (!shouldUseVirtualFocus && !isDisabled) itemProps = {\n    tabIndex: key === manager.focusedKey ? 0 : -1,\n    onFocus(e) {\n      if (e.target === ref.current) manager.setFocusedKey(key);\n    }\n  };else if (isDisabled) itemProps.onMouseDown = e => {\n    // Prevent focus going to the body when clicking on a disabled item.\n    e.preventDefault();\n  };\n  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n  // With touch, onAction occurs on single tap, and long press enters selection mode.\n  let allowsSelection = !isDisabled && manager.canSelectItem(key);\n  let allowsActions = onAction && !isDisabled;\n  let hasPrimaryAction = allowsActions && (manager.selectionBehavior === \"replace\" ? !allowsSelection : manager.isEmpty);\n  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === \"replace\";\n  let hasAction = hasPrimaryAction || hasSecondaryAction;\n  let modality = (0, $eCAIO$useRef)(null);\n  let longPressEnabled = hasAction && allowsSelection;\n  let longPressEnabledOnPressStart = (0, $eCAIO$useRef)(false);\n  let hadPrimaryActionOnPressStart = (0, $eCAIO$useRef)(false);\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = e => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === \"keyboard\" && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) itemPressProps.onPress = e => {\n      if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== \"mouse\") {\n        if (e.pointerType === \"keyboard\" && !$880e95eb8b93ba9a$var$isActionKey()) return;\n        onAction();\n      } else if (e.pointerType !== \"keyboard\") onSelect(e);\n    };else {\n      itemPressProps.onPressUp = e => {\n        if (e.pointerType !== \"keyboard\") onSelect(e);\n      };\n      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;\n    }\n  } else {\n    itemPressProps.onPressStart = e => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n      // Select on mouse down unless there is a primary action which will occur on mouse up.\n      // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n      // and the Enter key performs onAction on key up.\n      if (e.pointerType === \"mouse\" && !hasPrimaryAction || e.pointerType === \"keyboard\" && (!onAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n    itemPressProps.onPress = e => {\n      // Selection occurs on touch up. Primary actions always occur on pointer up.\n      // Both primary and secondary actions occur on Enter key up. The only exception\n      // is secondary actions, which occur on double click with a mouse.\n      if (e.pointerType === \"touch\" || e.pointerType === \"pen\" || e.pointerType === \"virtual\" || e.pointerType === \"keyboard\" && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === \"mouse\" && hadPrimaryActionOnPressStart.current) {\n        if (hasAction) onAction();else onSelect(e);\n      }\n    };\n  }\n  if (!isVirtualized) itemProps[\"data-key\"] = key;\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $eCAIO$usePress)(itemPressProps);\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? e => {\n    if (modality.current === \"mouse\") {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  let {\n    longPressProps: longPressProps\n  } = (0, $eCAIO$useLongPress)({\n    isDisabled: !longPressEnabled,\n    onLongPress(e) {\n      if (e.pointerType === \"touch\") {\n        onSelect(e);\n        manager.setSelectionBehavior(\"toggle\");\n      }\n    }\n  });\n  // Prevent native drag and drop on long press if we also select on long press.\n  // Once the user is in selection mode, they can long press again to drag.\n  // Use a capturing listener to ensure this runs before useDrag, regardless of\n  // the order the props get merged.\n  let onDragStartCapture = e => {\n    if (modality.current === \"touch\" && longPressEnabledOnPressStart.current) e.preventDefault();\n  };\n  return {\n    itemProps: (0, $eCAIO$mergeProps)(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {\n      onDoubleClick: onDoubleClick,\n      onDragStartCapture: onDragStartCapture\n    }),\n    isPressed: isPressed,\n    isSelected: manager.isSelected(key),\n    isFocused: manager.isFocused && manager.focusedKey === key,\n    isDisabled: isDisabled,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\nfunction $880e95eb8b93ba9a$var$isActionKey() {\n  let event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === \"Enter\";\n}\nfunction $880e95eb8b93ba9a$var$isSelectionKey() {\n  let event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === \" \" || (event === null || event === void 0 ? void 0 : event.code) === \"Space\";\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $2a25aae57d74318e$export$a05409b8bb224a5a {\n  getKeyBelow(key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyAfter(key);\n    }\n    return null;\n  }\n  getKeyAbove(key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyBefore(key);\n    }\n    return null;\n  }\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyAfter(key);\n    }\n    return null;\n  }\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === \"item\" && !this.disabledKeys.has(key)) return key;\n      key = this.collection.getKeyBefore(key);\n    }\n    return null;\n  }\n  getItem(key) {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n  getKeyPageAbove(key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) return null;\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = key == null ? null : this.getItem(key);\n    }\n    return key;\n  }\n  getKeyPageBelow(key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) return null;\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = key == null ? null : this.getItem(key);\n    }\n    return key;\n  }\n  getKeyForSearch(search, fromKey) {\n    if (!this.collator) return null;\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) return key;\n      key = this.getKeyBelow(key);\n    }\n    return null;\n  }\n  constructor(collection, disabledKeys, ref, collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n}\nfunction $982254629710d113$export$b95089534ab7c1fd(props) {\n  let {\n    selectionManager: selectionManager,\n    collection: collection,\n    disabledKeys: disabledKeys,\n    ref: ref,\n    keyboardDelegate: keyboardDelegate,\n    autoFocus: autoFocus,\n    shouldFocusWrap: shouldFocusWrap,\n    isVirtualized: isVirtualized,\n    disallowEmptySelection: disallowEmptySelection,\n    selectOnFocus = selectionManager.selectionBehavior === \"replace\",\n    disallowTypeAhead: disallowTypeAhead,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation: allowsTabNavigation\n  } = props;\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = (0, $eCAIO$useCollator)({\n    usage: \"search\",\n    sensitivity: \"base\"\n  });\n  let disabledBehavior = selectionManager.disabledBehavior;\n  let delegate = (0, $eCAIO$useMemo)(() => keyboardDelegate || new (0, $2a25aae57d74318e$export$a05409b8bb224a5a)(collection, disabledBehavior === \"selection\" ? new Set() : disabledKeys, ref, collator), [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n  let {\n    collectionProps: collectionProps\n  } = (0, $ae20dd8cbca75726$export$d6daf82dcd84e87c)({\n    ref: ref,\n    selectionManager: selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus: autoFocus,\n    shouldFocusWrap: shouldFocusWrap,\n    disallowEmptySelection: disallowEmptySelection,\n    selectOnFocus: selectOnFocus,\n    disallowTypeAhead: disallowTypeAhead,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation: allowsTabNavigation,\n    isVirtualized: isVirtualized,\n    scrollRef: ref\n  });\n  return {\n    listProps: collectionProps\n  };\n}\nexport { $ae20dd8cbca75726$export$d6daf82dcd84e87c as useSelectableCollection, $880e95eb8b93ba9a$export$ecf600387e221c37 as useSelectableItem, $982254629710d113$export$b95089534ab7c1fd as useSelectableList, $2a25aae57d74318e$export$a05409b8bb224a5a as ListKeyboardDelegate, $fb3050f43d946246$export$e32c88dfddc6e1d8 as useTypeSelect };","map":{"version":3,"names":["$feb5ffebff200149$export$d3e3bd3e26688c04","e","$eCAIO$isAppleDevice","altKey","ctrlKey","$feb5ffebff200149$export$16792effe837dba3","$eCAIO$isMac","metaKey","$fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS","$fb3050f43d946246$export$e32c88dfddc6e1d8","options","keyboardDelegate","selectionManager","onTypeSelect","state","$eCAIO$useRef","search","timeout","current","onKeyDown","character","$fb3050f43d946246$var$getStringForKey","key","trim","length","preventDefault","stopPropagation","getKeyForSearch","focusedKey","setFocusedKey","clearTimeout","setTimeout","typeSelectProps","onKeyDownCapture","test","$ae20dd8cbca75726$export$d6daf82dcd84e87c","manager","delegate","ref","autoFocus","shouldFocusWrap","disallowEmptySelection","disallowSelectAll","selectOnFocus","selectionBehavior","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","isVirtualized","scrollRef","direction","$eCAIO$useLocale","contains","target","navigateToKey","childFocus","shiftKey","selectionMode","extendSelection","replaceSelection","getKeyBelow","_delegate_getFirstKey","_delegate_getFirstKey1","nextKey","getFirstKey","call","getKeyAbove","_delegate_getLastKey","_delegate_getLastKey1","nextKey1","getLastKey","getKeyLeftOf","nextKey2","getKeyRightOf","nextKey3","firstKey","lastKey","getKeyPageBelow","nextKey4","getKeyPageAbove","nextKey5","selectAll","clearSelection","focus","walker","$eCAIO$getFocusableTreeWalker","tabbable","next","last","lastChild","document","activeElement","$eCAIO$focusWithoutScrolling","scrollPos","top","left","$eCAIO$useEvent","scrollTop","scrollLeft","onFocus","isFocused","currentTarget","setFocused","navigateToFirstKey","relatedTarget","_manager_lastSelectedKey","_manager_firstSelectedKey","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","firstSelectedKey","element","querySelector","$eCAIO$scrollIntoView","onBlur","autoFocusRef","$eCAIO$useEffect","selectedKeys","size","values","value","$eCAIO$focusSafely","modality","$eCAIO$getInteractionModality","$eCAIO$scrollIntoViewport","containingElement","handlers","onMouseDown","$eCAIO$mergeProps","tabIndex","collectionProps","$880e95eb8b93ba9a$export$ecf600387e221c37","shouldSelectOnPressUp","isDisabled","onAction","allowsDifferentPressOrigin","onSelect","pointerType","toggleSelection","isSelected","childFocusStrategy","itemProps","allowsSelection","canSelectItem","allowsActions","hasPrimaryAction","isEmpty","hasSecondaryAction","hasAction","longPressEnabled","longPressEnabledOnPressStart","hadPrimaryActionOnPressStart","itemPressProps","onPressStart","$880e95eb8b93ba9a$var$isSelectionKey","onPress","$880e95eb8b93ba9a$var$isActionKey","onPressUp","preventFocusOnPress","pressProps","isPressed","$eCAIO$usePress","onDoubleClick","undefined","longPressProps","$eCAIO$useLongPress","onLongPress","setSelectionBehavior","onDragStartCapture","event","window","code","$2a25aae57d74318e$export$a05409b8bb224a5a","collection","getKeyAfter","item","getItem","type","disabledKeys","has","getKeyBefore","menu","pageY","Math","max","offsetTop","offsetHeight","min","scrollHeight","fromKey","collator","substring","textValue","slice","compare","constructor","$982254629710d113$export$b95089534ab7c1fd","props","$eCAIO$useCollator","usage","sensitivity","disabledBehavior","$eCAIO$useMemo","Set","listProps"],"sources":["C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\index.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\useSelectableCollection.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\utils.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\useTypeSelect.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\useSelectableItem.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\useSelectableList.ts","C:\\Users\\Dmitry\\Desktop\\JS\\44pract\\client\\zaebalo\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\ListKeyboardDelegate.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useSelectableCollection} from './useSelectableCollection';\nexport {useSelectableItem} from './useSelectableItem';\nexport {useSelectableList} from './useSelectableList';\nexport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nexport {useTypeSelect} from './useTypeSelect';\n\nexport type {AriaSelectableCollectionOptions, SelectableCollectionAria} from './useSelectableCollection';\nexport type {AriaSelectableListOptions, SelectableListAria} from './useSelectableList';\nexport type {SelectableItemOptions, SelectableItemStates, SelectableItemAria} from './useSelectableItem';\nexport type {AriaTypeSelectOptions, TypeSelectAria} from './useTypeSelect';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {FocusEvent, Key, KeyboardEvent, RefObject, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {focusWithoutScrolling, mergeProps, scrollIntoView, scrollIntoViewport, useEvent} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\nexport interface AriaSelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement>\n}\n\nexport interface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: DOMAttributes\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: AriaSelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref\n  } = options;\n  let {direction} = useLocale();\n\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target as Element)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: FocusableElement;\n            let last: FocusableElement;\n            do {\n              last = walker.lastChild() as FocusableElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = (key: Key | undefined) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToFirstKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        navigateToFirstKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n    }\n\n    if (!isVirtualized && manager.focusedKey != null) {\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection, or the collection itself.\n        focusWithoutScrolling(element);\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n    autoFocusRef.current = false;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    let modality = getInteractionModality();\n    if (!isVirtualized && manager.isFocused && manager.focusedKey != null && scrollRef?.current) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        scrollIntoView(scrollRef.current, element);\n        if (modality === 'keyboard') {\n          scrollIntoViewport(element, {containingElement: ref.current});\n        }\n      }\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey, manager.isFocused, ref]);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isAppleDevice} from '@react-aria/utils';\nimport {isMac} from '@react-aria/utils';\n\ninterface Event {\n  altKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean\n}\n\nexport function isNonContiguousSelectionModifier(e: Event) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return isAppleDevice() ? e.altKey : e.ctrlKey;\n}\n\nexport function isCtrlKeyPressed(e: Event) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {Key, KeyboardEvent, useRef} from 'react';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\n/**\n * Controls how long to wait before clearing the typeahead buffer.\n */\nconst TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second\n\nexport interface AriaTypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\nexport interface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: DOMAttributes\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: AriaTypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, LongPressEvent, PressEvent} from '@react-types/shared';\nimport {focusSafely} from '@react-aria/focus';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {Key, RefObject, useEffect, useRef} from 'react';\nimport {mergeProps} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressProps, useLongPress, usePress} from '@react-aria/interactions';\n\nexport interface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<FocusableElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether selection requires the pointer/mouse down and up events to occur on the same target or triggers selection on\n   * the target of the pointer/mouse up event.\n   */\n  allowsDifferentPressOrigin?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\nexport interface SelectableItemStates {\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the item is currently selected. */\n  isSelected: boolean,\n  /** Whether the item is currently focused. */\n  isFocused: boolean,\n  /**\n   * Whether the item is non-interactive, i.e. both selection and actions are disabled and the item may\n   * not be focused. Dependent on `disabledKeys` and `disabledBehavior`.\n   */\n  isDisabled: boolean,\n  /**\n   * Whether the item may be selected, dependent on `selectionMode`, `disabledKeys`, and `disabledBehavior`.\n   */\n  allowsSelection: boolean,\n  /**\n   * Whether the item has an action, dependent on `onAction`, `disabledKeys`,\n   * and `disabledBehavior`. It may also change depending on the current selection state\n   * of the list (e.g. when selection is primary). This can be used to enable or disable hover\n   * styles or other visual indications of interactivity.\n   */\n  hasAction: boolean\n}\n\nexport interface SelectableItemAria extends SelectableItemStates {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: DOMAttributes\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    focus,\n    isDisabled,\n    onAction,\n    allowsDifferentPressOrigin\n  } = options;\n\n  let onSelect = (e: PressEvent | LongPressEvent | PointerEvent) => {\n    if (e.pointerType === 'keyboard' && isNonContiguousSelectionModifier(e)) {\n      manager.toggleSelection(key);\n    } else {\n      if (manager.selectionMode === 'none') {\n        return;\n      }\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) {\n          manager.toggleSelection(key);\n        } else {\n          manager.replaceSelection(key);\n        }\n      } else if (e && e.shiftKey) {\n        manager.extendSelection(key);\n      } else if (manager.selectionBehavior === 'toggle' || (e && (isCtrlKeyPressed(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);\n      } else {\n        manager.replaceSelection(key);\n      }\n    }\n  };\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  useEffect(() => {\n    let isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus) {\n      if (focus) {\n        focus();\n      } else if (document.activeElement !== ref.current) {\n        focusSafely(ref.current);\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  isDisabled = isDisabled || manager.isDisabled(key);\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus && !isDisabled) {\n    itemProps = {\n      tabIndex: key === manager.focusedKey ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  } else if (isDisabled) {\n    itemProps.onMouseDown = (e) => {\n      // Prevent focus going to the body when clicking on a disabled item.\n      e.preventDefault();\n    };\n  }\n\n  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n  // With touch, onAction occurs on single tap, and long press enters selection mode.\n  let allowsSelection = !isDisabled && manager.canSelectItem(key);\n  let allowsActions = onAction && !isDisabled;\n  let hasPrimaryAction = allowsActions && (\n    manager.selectionBehavior === 'replace'\n      ? !allowsSelection\n      : manager.isEmpty\n  );\n  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';\n  let hasAction = hasPrimaryAction || hasSecondaryAction;\n  let modality = useRef(null);\n\n  let longPressEnabled = hasAction && allowsSelection;\n  let longPressEnabledOnPressStart = useRef(false);\n  let hadPrimaryActionOnPressStart = useRef(false);\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps: PressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === 'keyboard' && (!hasAction || isSelectionKey())) {\n        onSelect(e);\n      }\n    };\n\n    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) {\n      itemPressProps.onPress = (e) => {\n        if (hasPrimaryAction || (hasSecondaryAction && e.pointerType !== 'mouse')) {\n          if (e.pointerType === 'keyboard' && !isActionKey()) {\n            return;\n          }\n\n          onAction();\n        } else if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n    } else {\n      itemPressProps.onPressUp = (e) => {\n        if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n\n      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;\n    }\n  } else {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n\n      // Select on mouse down unless there is a primary action which will occur on mouse up.\n      // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n      // and the Enter key performs onAction on key up.\n      if (\n        (e.pointerType === 'mouse' && !hasPrimaryAction) ||\n        (e.pointerType === 'keyboard' && (!onAction || isSelectionKey()))\n      ) {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = (e) => {\n      // Selection occurs on touch up. Primary actions always occur on pointer up.\n      // Both primary and secondary actions occur on Enter key up. The only exception\n      // is secondary actions, which occur on double click with a mouse.\n      if (\n        e.pointerType === 'touch' ||\n        e.pointerType === 'pen' ||\n        e.pointerType === 'virtual' ||\n        (e.pointerType === 'keyboard' && hasAction && isActionKey()) ||\n        (e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current)\n      ) {\n        if (hasAction) {\n          onAction();\n        } else {\n          onSelect(e);\n        }\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {pressProps, isPressed} = usePress(itemPressProps);\n\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? (e) => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  let {longPressProps} = useLongPress({\n    isDisabled: !longPressEnabled,\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  });\n\n  // Prevent native drag and drop on long press if we also select on long press.\n  // Once the user is in selection mode, they can long press again to drag.\n  // Use a capturing listener to ensure this runs before useDrag, regardless of\n  // the order the props get merged.\n  let onDragStartCapture = e => {\n    if (modality.current === 'touch' && longPressEnabledOnPressStart.current) {\n      e.preventDefault();\n    }\n  };\n\n  return {\n    itemProps: mergeProps(\n      itemProps,\n      allowsSelection || hasPrimaryAction ? pressProps : {},\n      longPressEnabled ? longPressProps : {},\n      {onDoubleClick, onDragStartCapture}\n    ),\n    isPressed,\n    isSelected: manager.isSelected(key),\n    isFocused: manager.isFocused && manager.focusedKey === key,\n    isDisabled,\n    allowsSelection,\n    hasAction\n  };\n}\n\nfunction isActionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === 'Enter';\n}\n\nfunction isSelectionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === ' ' || event?.code === 'Space';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, DOMAttributes, FocusStrategy, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useCollator} from '@react-aria/i18n';\nimport {useSelectableCollection} from './useSelectableCollection';\n\nexport interface AriaSelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>,\n  /**\n   * A ref to the item.\n   */\n  ref?: RefObject<HTMLElement>,\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\nexport interface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: DOMAttributes\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: AriaSelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = selectionManager.selectionBehavior === 'replace',\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let disabledBehavior = selectionManager.disabledBehavior;\n  let delegate = useMemo(() => (\n    keyboardDelegate || new ListKeyboardDelegate(collection, disabledBehavior === 'selection' ? new Set() : disabledKeys, ref, collator)\n  ), [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n    isVirtualized,\n    scrollRef: ref\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject} from 'react';\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  getKeyBelow(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return null;\n  }\n\n  getKeyAbove(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n\n    return null;\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return null;\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n\n    return null;\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = key == null ? null : this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = key == null ? null : this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}